// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");

function getState(status) {
  if (status.TAG === "PendingInit") {
    return ;
  } else {
    return status._0;
  }
}

var dict = {};

function get(fileName) {
  return Belt_Option.flatMap(Js_dict.get(dict, fileName), getState);
}

function add(fileName, state) {
  var match = Js_dict.get(dict, fileName);
  if (match !== undefined) {
    if (match.TAG !== "PendingInit") {
      return ;
    }
    match._1(Highlighting$AgdaModeVscode.getSemanticTokens(state.highlighting));
    dict[fileName] = {
      TAG: "Initialized",
      _0: state,
      [Symbol.for("name")]: "Initialized"
    };
    return ;
  }
  dict[fileName] = {
    TAG: "Initialized",
    _0: state,
    [Symbol.for("name")]: "Initialized"
  };
}

function remove(fileName) {
  Util$AgdaModeVscode.Dict.$$delete(dict, fileName);
}

async function removeAndDestroy(fileName) {
  var match = Js_dict.get(dict, fileName);
  if (match === undefined) {
    return ;
  }
  if (match.TAG === "PendingInit") {
    remove(fileName);
    return match._1([]);
  }
  remove(fileName);
  State$AgdaModeVscode.destroy(match._0, false);
}

async function removeAndDestroyAll() {
  await Util$AgdaModeVscode.oneByOne(Belt_Array.map(Object.keys(dict), removeAndDestroy));
}

function isEmpty() {
  return Object.keys(dict).length === 0;
}

async function requestSemanticTokens(fileName) {
  var match = Js_dict.get(dict, fileName);
  if (match !== undefined) {
    if (match.TAG === "PendingInit") {
      return await match._0;
    } else {
      return Highlighting$AgdaModeVscode.getSemanticTokens(match._0.highlighting);
    }
  }
  var match$1 = Util$AgdaModeVscode.Promise_.pending();
  var promise = match$1[0];
  dict[fileName] = {
    TAG: "PendingInit",
    _0: promise,
    _1: match$1[1],
    [Symbol.for("name")]: "PendingInit"
  };
  return await promise;
}

var Module = {
  get: get,
  add: add,
  remove: remove,
  removeAndDestroy: removeAndDestroy,
  removeAndDestroyAll: removeAndDestroyAll,
  isEmpty: isEmpty,
  requestSemanticTokens: requestSemanticTokens
};

exports.Module = Module;
exports.get = get;
exports.add = add;
exports.remove = remove;
exports.removeAndDestroy = removeAndDestroy;
exports.removeAndDestroyAll = removeAndDestroyAll;
exports.isEmpty = isEmpty;
exports.requestSemanticTokens = requestSemanticTokens;
/* Util-AgdaModeVscode Not a pure module */
