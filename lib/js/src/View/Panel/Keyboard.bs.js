// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var React = require("react");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Translator$AgdaModeVscode = require("../../InputMethod/Translator.bs.js");
var CandidateSymbols$AgdaModeVscode = require("./CandidateSymbols.bs.js");

function reducer(state, action) {
  if (typeof action !== "object") {
    switch (action) {
      case "Activate" :
          var translation = Translator$AgdaModeVscode.translate("", undefined);
          return {
                  sequence: "",
                  translation: translation,
                  candidateIndex: 0
                };
      case "Deactivate" :
          return ;
      default:
        
    }
  }
  if (state === undefined) {
    return ;
  }
  if (typeof action === "object") {
    return {
            sequence: action._0,
            translation: action._1,
            candidateIndex: action._2
          };
  }
  switch (action) {
    case "BrowseUp" :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml.int_max(0, state.candidateIndex - 10 | 0)
              };
    case "BrowseRight" :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml.int_min(state.translation.candidateSymbols.length - 1 | 0, state.candidateIndex + 1 | 0)
              };
    case "BrowseDown" :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml.int_min(state.translation.candidateSymbols.length - 1 | 0, state.candidateIndex + 10 | 0)
              };
    case "BrowseLeft" :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml.int_max(0, state.candidateIndex - 1 | 0)
              };
    
  }
}

function Keyboard(props) {
  var state = props.state;
  if (state === undefined) {
    return React.createElement("div", {
                className: "agda-mode-keyboard deactivated"
              });
  }
  var translation = state.translation;
  var onInsertChar = props.onInsertChar;
  return React.createElement("div", {
              className: "agda-mode-keyboard" + (
                props.prompting ? " prompting" : ""
              )
            }, React.createElement("div", {
                  className: "agda-mode-keyboard-sequence-and-candidates"
                }, React.createElement("div", {
                      className: "agda-mode-keyboard-sequence"
                    }, state.sequence), React.createElement(CandidateSymbols$AgdaModeVscode.make, {
                      candidates: translation.candidateSymbols,
                      index: state.candidateIndex,
                      onChooseSymbol: props.onChooseSymbol
                    })), React.createElement("div", {
                  className: "agda-mode-keyboard-suggestions"
                }, Belt_Array.map(translation.keySuggestions, (function (key) {
                        return React.createElement("button", {
                                    key: key,
                                    className: "agda-mode-key",
                                    onClick: (function (param) {
                                        onInsertChar(key);
                                      })
                                  }, key);
                      }))));
}

var make = Keyboard;

exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
