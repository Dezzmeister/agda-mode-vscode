// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");

function toString(x) {
  if (x.TAG === "SrcLoc") {
    return Common$AgdaModeVscode.AgdaRange.toString(x._0);
  } else {
    return "?" + String(x._0);
  }
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "LinkHole" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.$$int, (function (index) {
                            return {
                                    TAG: "Hole",
                                    _0: index,
                                    [Symbol.for("name")]: "Hole"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "LinkRange" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Common$AgdaModeVscode.AgdaRange.decode, (function (range) {
                            return {
                                    TAG: "SrcLoc",
                                    _0: range,
                                    [Symbol.for("name")]: "SrcLoc"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[View.Link] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var encode = Util$AgdaModeVscode.Encode.sum(function (x) {
      if (x.TAG === "SrcLoc") {
        return {
                TAG: "Payload",
                _0: "LinkRange",
                _1: Common$AgdaModeVscode.AgdaRange.encode(x._0),
                [Symbol.for("name")]: "Payload"
              };
      } else {
        return {
                TAG: "Payload",
                _0: "LinkHole",
                _1: x._0,
                [Symbol.for("name")]: "Payload"
              };
      }
    });

var chan = Chan$AgdaModeVscode.make();

var eventContext = React.createContext(chan);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = eventContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "JumpToTarget" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(decode, (function (target) {
                            return {
                                    TAG: "JumpToTarget",
                                    _0: target,
                                    [Symbol.for("name")]: "JumpToTarget"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "MouseOut" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(decode, (function (target) {
                            return {
                                    TAG: "MouseOut",
                                    _0: target,
                                    [Symbol.for("name")]: "MouseOut"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "MouseOver" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(decode, (function (target) {
                            return {
                                    TAG: "MouseOver",
                                    _0: target,
                                    [Symbol.for("name")]: "MouseOver"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[Link.Event] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var encode$1 = Util$AgdaModeVscode.Encode.sum(function (x) {
      switch (x.TAG) {
        case "JumpToTarget" :
            return {
                    TAG: "Payload",
                    _0: "JumpToTarget",
                    _1: encode(x._0),
                    [Symbol.for("name")]: "Payload"
                  };
        case "MouseOver" :
            return {
                    TAG: "Payload",
                    _0: "MouseOver",
                    _1: encode(x._0),
                    [Symbol.for("name")]: "Payload"
                  };
        case "MouseOut" :
            return {
                    TAG: "Payload",
                    _0: "MouseOut",
                    _1: encode(x._0),
                    [Symbol.for("name")]: "Payload"
                  };
        
      }
    });

var $$Event = {
  chan: chan,
  eventContext: eventContext,
  Provider: Provider,
  decode: decode$1,
  encode: encode$1
};

function Link(props) {
  var children = props.children;
  var __className = props.className;
  var __hover = props.hover;
  var __jump = props.jump;
  var __target = props.target;
  var target = __target !== undefined ? __target : ({
        TAG: "SrcLoc",
        _0: "NoRange",
        [Symbol.for("name")]: "SrcLoc"
      });
  var jump = __jump !== undefined ? __jump : false;
  var hover = __hover !== undefined ? __hover : false;
  var className = __className !== undefined ? __className : [];
  var sanitizedTarget;
  if (target.TAG === "SrcLoc") {
    var range = target._0;
    sanitizedTarget = typeof range !== "object" || range._1.length === 0 ? undefined : ({
          TAG: "SrcLoc",
          _0: range,
          [Symbol.for("name")]: "SrcLoc"
        });
  } else {
    sanitizedTarget = {
      TAG: "Hole",
      _0: target._0,
      [Symbol.for("name")]: "Hole"
    };
  }
  var link = React.useContext(eventContext);
  if (sanitizedTarget !== undefined) {
    return React.createElement("span", {
                className: Caml_splice_call.spliceObjApply(" ", "concat", [Belt_Array.concatMany([
                            ["component-link"],
                            className
                          ])]),
                onClick: (function (param) {
                    if (jump) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: "JumpToTarget",
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "JumpToTarget"
                                });
                    }
                    
                  }),
                onMouseOut: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: "MouseOut",
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOut"
                                });
                    }
                    
                  }),
                onMouseOver: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: "MouseOver",
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOver"
                                });
                    }
                    
                  })
              }, children);
  } else {
    return React.createElement("span", {
                className: Caml_splice_call.spliceObjApply(" ", "concat", [className])
              }, children);
  }
}

var make$1 = Link;

exports.toString = toString;
exports.decode = decode;
exports.encode = encode;
exports.$$Event = $$Event;
exports.make = make$1;
/* decode Not a pure module */
