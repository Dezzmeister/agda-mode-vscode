// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Item$AgdaModeVscode = require("./Component/Item.bs.js");
var Link$AgdaModeVscode = require("./Component/Link.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Common$AgdaModeVscode = require("./Common.bs.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");

function toString(x) {
  return x._0;
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Error" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 3,
                                              _0: text,
                                              [Symbol.for("name")]: "Error"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Plain" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 0,
                                              _0: text,
                                              [Symbol.for("name")]: "Plain"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Success" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 1,
                                              _0: text,
                                              [Symbol.for("name")]: "Success"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Warning" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 2,
                                              _0: text,
                                              [Symbol.for("name")]: "Warning"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Header] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* Plain */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Plain"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Success */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Success"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Warning */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Warning"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Error */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Error"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Header = {
  toString: toString,
  decode: decode,
  encode: encode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Prompt") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          body: param[0],
                                          placeholder: param[1],
                                          value: param[2]
                                        };
                                }), (function (param) {
                                  return Json_decode.tuple3((function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), (function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), (function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Prompt] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$1(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Prompt"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.tuple3((function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), [
                        x.body,
                        x.placeholder,
                        x.value
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var Prompt = {
  decode: decode$1,
  encode: encode$1
};

var Body = {};

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Activate" :
            return {
                    TAG: 1,
                    _0: /* Activate */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseDown" :
            return {
                    TAG: 1,
                    _0: /* BrowseDown */4,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseLeft" :
            return {
                    TAG: 1,
                    _0: /* BrowseLeft */5,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseRight" :
            return {
                    TAG: 1,
                    _0: /* BrowseRight */3,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseUp" :
            return {
                    TAG: 1,
                    _0: /* BrowseUp */2,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Deactivate" :
            return {
                    TAG: 1,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Update" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Update"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(Json_decode.string, Translator$AgdaModeVscode.decode, Json_decode.$$int, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventToView.InputMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (typeof x !== "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Update"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.tuple3((function (prim) {
                            return prim;
                          }), Translator$AgdaModeVscode.encode, (function (prim) {
                            return prim;
                          }), [
                          x._0,
                          x._1,
                          x._2
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  }
  switch (x) {
    case /* Activate */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Activate"
                    ],
                    tl: /* [] */0
                  });
    case /* Deactivate */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Deactivate"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseUp */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseUp"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseRight */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseRight"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseDown */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseDown"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseLeft */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseLeft"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var InputMethod = {
  decode: decode$2,
  encode: encode$2
};

function toString$1(x) {
  if (typeof x === "number") {
    return "PromptInterrupt";
  }
  switch (x.TAG | 0) {
    case /* Display */0 :
        return "Display " + x._0._0;
    case /* Append */1 :
        return "Append " + x._0._0;
    case /* SetStatus */2 :
        return "SetStatus " + x._0;
    case /* PromptIMUpdate */3 :
        return "PromptIMUpdate " + x._0;
    case /* InputMethod */4 :
        return "InputMethod";
    case /* ConfigurationChange */5 :
        return "ConfigurationChange";
    
  }
}

var decode$3 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Append" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Append"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode, (function (param) {
                                                    return Json_decode.array(Item$AgdaModeVscode.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ConfigurationChange" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (size) {
                                      return {
                                              TAG: 5,
                                              _0: size,
                                              [Symbol.for("name")]: "ConfigurationChange"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Display" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Display"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode, (function (param) {
                                                    return Json_decode.array(Item$AgdaModeVscode.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "InputMethod" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 4,
                                              _0: x,
                                              [Symbol.for("name")]: "InputMethod"
                                            };
                                    }), decode$2, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptIMUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 3,
                                              _0: text,
                                              [Symbol.for("name")]: "PromptIMUpdate"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptInterrupt" :
            return {
                    TAG: 1,
                    _0: /* PromptInterrupt */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "SetStatus" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 2,
                                              _0: text,
                                              [Symbol.for("name")]: "SetStatus"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventToView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$3(x) {
  if (typeof x === "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptInterrupt"
                ],
                tl: /* [] */0
              });
  }
  switch (x.TAG | 0) {
    case /* Display */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Display"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair(encode, (function (param) {
                                return Json_encode.array(Item$AgdaModeVscode.encode, param);
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Append */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Append"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair(encode, (function (param) {
                                return Json_encode.array(Item$AgdaModeVscode.encode, param);
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* SetStatus */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "SetStatus"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PromptIMUpdate */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PromptIMUpdate"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* InputMethod */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "InputMethod"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$2(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* ConfigurationChange */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ConfigurationChange"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var EventToView = {
  InputMethod: InputMethod,
  toString: toString$1,
  decode: decode$3,
  encode: encode$3
};

function toString$2(x) {
  return "Prompt " + x._0._0;
}

var decode$4 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Prompt") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          _0: param[0],
                                          _1: param[1],
                                          [Symbol.for("name")]: "Prompt"
                                        };
                                }), (function (param) {
                                  return Json_decode.pair(decode, decode$1, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Request] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$4(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Prompt"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.pair(encode, encode$1, [
                        x._0,
                        x._1
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var $$Request = {
  toString: toString$2,
  decode: decode$4,
  encode: encode$4
};

function toString$3(x) {
  if (x.TAG === /* Request */0) {
    return toString$2(x._0);
  } else {
    return toString$1(x._0);
  }
}

var decode$5 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Event" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 1,
                                              _0: x,
                                              [Symbol.for("name")]: "Event"
                                            };
                                    }), decode$3, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Request" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Request"
                                            };
                                    }), decode$4, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[RequestOrEventToView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$5(x) {
  if (x.TAG === /* Request */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Request"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$4(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Event"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$3(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var RequestOrEventToView = {
  toString: toString$3,
  decode: decode$5,
  encode: encode$5
};

var decode$6 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "PromptInterrupted" :
            return {
                    TAG: 1,
                    _0: /* PromptInterrupted */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "PromptSuccess" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (result) {
                                      return {
                                              _0: result,
                                              [Symbol.for("name")]: "PromptSuccess"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$6(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptSuccess"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptInterrupted"
                ],
                tl: /* [] */0
              });
  }
}

var $$Response = {
  decode: decode$6,
  encode: encode$6
};

var decode$7 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ChooseSymbol" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 1,
                                              _0: $$char,
                                              [Symbol.for("name")]: "ChooseSymbol"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "InsertChar" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 0,
                                              _0: $$char,
                                              [Symbol.for("name")]: "InsertChar"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventFromView.InputMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$7(x) {
  if (x.TAG === /* InsertChar */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "InsertChar"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ChooseSymbol"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var InputMethod$1 = {
  decode: decode$7,
  encode: encode$7
};

var decode$8 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "BrowseDown" :
            return {
                    TAG: 1,
                    _0: /* BrowseDown */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseLeft" :
            return {
                    TAG: 1,
                    _0: /* BrowseLeft */2,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseRight" :
            return {
                    TAG: 1,
                    _0: /* BrowseRight */3,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseUp" :
            return {
                    TAG: 1,
                    _0: /* BrowseUp */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Escape" :
            return {
                    TAG: 1,
                    _0: /* Escape */4,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "KeyUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 1,
                                              _0: $$char,
                                              [Symbol.for("name")]: "KeyUpdate"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseSelect" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (interval) {
                                      return {
                                              TAG: 0,
                                              _0: interval,
                                              [Symbol.for("name")]: "MouseSelect"
                                            };
                                    }), Common$AgdaModeVscode.Interval.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventFromView.Prompt] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$8(x) {
  if (typeof x !== "number") {
    if (x.TAG === /* MouseSelect */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "MouseSelect"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      Common$AgdaModeVscode.Interval.encode(x._0)
                    ],
                    tl: /* [] */0
                  }
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "KeyUpdate"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      x._0
                    ],
                    tl: /* [] */0
                  }
                });
    }
  }
  switch (x) {
    case /* BrowseUp */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseUp"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseDown */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseDown"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseLeft */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseLeft"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseRight */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseRight"
                    ],
                    tl: /* [] */0
                  });
    case /* Escape */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Escape"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var PromptIMUpdate = {
  decode: decode$8,
  encode: encode$8
};

var chan = Chan$AgdaModeVscode.make(undefined);

var eventContext = React.createContext(chan);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = eventContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

var decode$9 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Destroyed" :
            return {
                    TAG: 1,
                    _0: /* Destroyed */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Initialized" :
            return {
                    TAG: 1,
                    _0: /* Initialized */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "InputMethod" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (action) {
                                      return {
                                              TAG: 0,
                                              _0: action,
                                              [Symbol.for("name")]: "InputMethod"
                                            };
                                    }), decode$7, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "JumpToTarget" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 2,
                                              _0: link,
                                              [Symbol.for("name")]: "JumpToTarget"
                                            };
                                    }), Link$AgdaModeVscode.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptIMUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (action) {
                                      return {
                                              TAG: 1,
                                              _0: action,
                                              [Symbol.for("name")]: "PromptIMUpdate"
                                            };
                                    }), decode$8, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$9(x) {
  if (typeof x === "number") {
    if (x === /* Initialized */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Initialized"
                  ],
                  tl: /* [] */0
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Destroyed"
                  ],
                  tl: /* [] */0
                });
    }
  }
  switch (x.TAG | 0) {
    case /* InputMethod */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "InputMethod"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$7(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PromptIMUpdate */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PromptIMUpdate"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$8(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* JumpToTarget */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "JumpToTarget"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Link$AgdaModeVscode.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var EventFromView = {
  InputMethod: InputMethod$1,
  PromptIMUpdate: PromptIMUpdate,
  chan: chan,
  eventContext: eventContext,
  Provider: Provider,
  decode: decode$9,
  encode: encode$9
};

var decode$10 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Event" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 1,
                                              _0: x,
                                              [Symbol.for("name")]: "Event"
                                            };
                                    }), decode$9, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Response" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Response"
                                            };
                                    }), decode$6, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[ResponseOrEventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$10(x) {
  if (x.TAG === /* Response */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Response"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$6(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Event"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$9(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var ResponseOrEventFromView = {
  decode: decode$10,
  encode: encode$10
};

exports.Header = Header;
exports.Prompt = Prompt;
exports.Body = Body;
exports.EventToView = EventToView;
exports.$$Request = $$Request;
exports.RequestOrEventToView = RequestOrEventToView;
exports.$$Response = $$Response;
exports.EventFromView = EventFromView;
exports.ResponseOrEventFromView = ResponseOrEventFromView;
/* decode Not a pure module */
