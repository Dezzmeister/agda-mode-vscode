// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Connection$AgdaModeVscode = require("./Connection/Connection.bs.js");
var State__Type$AgdaModeVscode = require("./State/State__Type.bs.js");
var State__View$AgdaModeVscode = require("./State/State__View.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var State__Memento$AgdaModeVscode = require("./State/State__Memento.bs.js");

function onDownload(state, $$event) {
  if (typeof $$event !== "object") {
    if ($$event === "Start") {
      State__View$AgdaModeVscode.Panel.displayStatus(state, "Start downloading");
      return ;
    }
    State__View$AgdaModeVscode.Panel.displayStatus(state, "Downloaded");
    return ;
  } else {
    var total = $$event._1;
    var accum = $$event._0;
    var message = total > 10485760 ? "Downloading ( " + String(accum / 1048576 | 0) + " MB / " + String(total / 1048576 | 0) + " MB )" : "Downloading ( " + String(accum / 1024 | 0) + " KB / " + String(total / 1024 | 0) + " MB )";
    State__View$AgdaModeVscode.Panel.displayStatus(state, message);
    return ;
  }
}

function sendRequest(state, handleResponse, request) {
  return State__Type$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                var match = Util$AgdaModeVscode.Promise_.pending();
                var resolve = match[1];
                var responseHandlerPromise = match[0];
                var onResponse = async function (response) {
                  await handleResponse(response);
                  Chan$AgdaModeVscode.emit(state.channels.log, {
                        TAG: "ResponseHandled",
                        _0: response,
                        [Symbol.for("name")]: "ResponseHandled"
                      });
                  return resolve();
                };
                Chan$AgdaModeVscode.emit(state.channels.log, {
                      TAG: "RequestSent",
                      _0: request,
                      [Symbol.for("name")]: "RequestSent"
                    });
                return Connection$AgdaModeVscode.sendRequest(state.connection, state.document, state.memento, request, onResponse).then(async function (result) {
                            if (result.TAG === "Ok") {
                              var status = result._0;
                              await State__View$AgdaModeVscode.Panel.displayConnectionStatus(state, status);
                              if (status.TAG === "Agda") {
                                state.agdaVersion = status._0;
                              } else {
                                state.agdaVersion = status._1;
                              }
                            } else {
                              await State__View$AgdaModeVscode.Panel.displayConnectionError(state, result._0);
                            }
                            return await responseHandlerPromise;
                          });
              }), request);
}

async function sendRequestAndCollectResponses(state, request) {
  var responses = {
    contents: []
  };
  var responseHandler = async function (response) {
    responses.contents.push(response);
  };
  await sendRequest(state, responseHandler, request);
  return responses.contents;
}

function destroy(state, alsoRemoveFromRegistry) {
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  state.goals.forEach(Goal$AgdaModeVscode.destroyDecoration);
  Highlighting$AgdaModeVscode.destroy(state.highlighting);
  state.subscriptions.forEach(function (prim) {
        return prim.dispose();
      });
  return Connection$AgdaModeVscode.stop(state.connection);
}

function make(channels, globalStorageUri, extensionPath, memento, editor) {
  return {
          connection: undefined,
          agdaVersion: undefined,
          editor: editor,
          document: editor.document,
          panelCache: State__Type$AgdaModeVscode.ViewCache.make(),
          runningInfoLog: [],
          goals: [],
          tokens: Tokens$AgdaModeVscode.make(),
          highlighting: Highlighting$AgdaModeVscode.make(),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(channels.inputMethod),
          promptIM: IM$AgdaModeVscode.make(channels.inputMethod),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(),
          agdaRequestQueue: State__Type$AgdaModeVscode.RequestQueue.make(),
          globalStorageUri: globalStorageUri,
          extensionPath: extensionPath,
          memento: State__Memento$AgdaModeVscode.make(memento),
          channels: channels
        };
}

var View;

var Context;

exports.View = View;
exports.Context = Context;
exports.onDownload = onDownload;
exports.sendRequest = sendRequest;
exports.sendRequestAndCollectResponses = sendRequestAndCollectResponses;
exports.destroy = destroy;
exports.make = make;
/* IM-AgdaModeVscode Not a pure module */
