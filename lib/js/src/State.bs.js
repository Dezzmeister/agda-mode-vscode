// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Connection$AgdaModeVscode = require("./Connection/Connection.bs.js");
var State__Type$AgdaModeVscode = require("./State/State__Type.bs.js");
var State__View$AgdaModeVscode = require("./State/State__View.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var State__Memento$AgdaModeVscode = require("./State/State__Memento.bs.js");

function onDownload(state, $$event) {
  if (typeof $$event !== "object") {
    if ($$event === "Start") {
      State__View$AgdaModeVscode.Panel.displayStatus(state, "Start downloading");
      return ;
    }
    State__View$AgdaModeVscode.Panel.displayStatus(state, "Downloaded");
    return ;
  } else {
    var total = $$event._1;
    var accum = $$event._0;
    var message = total > 10485760 ? "Downloading ( " + String(accum / 1048576 | 0) + " MB / " + String(total / 1048576 | 0) + " MB )" : "Downloading ( " + String(accum / 1024 | 0) + " KB / " + String(total / 1024 | 0) + " MB )";
    State__View$AgdaModeVscode.Panel.displayStatus(state, message);
    return ;
  }
}

async function handleDownloadPolicy(state, policy) {
  switch (policy) {
    case "YesKeepUpToDate" :
        await State__View$AgdaModeVscode.Panel.display(state, {
              TAG: "Plain",
              _0: "Trying to download and install the latest Agda Language Server and keep it up-to-date",
              [Symbol.for("name")]: "Plain"
            }, []);
        var target = await Connection$AgdaModeVscode.downloadLatestALS(state.memento, state.globalStorageUri);
        if (target !== undefined) {
          console.log(target);
          console.log("Downloading the latest Agda Language Server");
          return ;
        } else {
          console.log("Cannot find the latest Agda Language Server release");
          return await State__View$AgdaModeVscode.Panel.display(state, {
                      TAG: "Plain",
                      _0: "Cannot find the latest Agda Language Server release",
                      [Symbol.for("name")]: "Plain"
                    }, []);
        }
    case "YesButDontUpdate" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Trying to download and install the latest Agda Language Server",
                    [Symbol.for("name")]: "Plain"
                  }, []);
    case "NoDontAskAgain" :
        return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, "CannotFindALSorAgda");
    case "Undecided" :
        var result = await Vscode.window.showWarningMessage("Cannot find Agda or Agda Language Server", {
              modal: true,
              detail: "Do you want to download and install the latest Agda Language Server?"
            }, "Yes, and keep it up-to-date", "Yes, but don't update afterwards", "No, and don't ask again");
        var newPolicy;
        if (result !== undefined) {
          switch (result) {
            case "No, and don't ask again" :
                newPolicy = "NoDontAskAgain";
                break;
            case "Yes, and keep it up-to-date" :
                newPolicy = "YesKeepUpToDate";
                break;
            case "Yes, but don't update afterwards" :
                newPolicy = "YesButDontUpdate";
                break;
            default:
              newPolicy = "Undecided";
          }
        } else {
          newPolicy = "Undecided";
        }
        return await Config$AgdaModeVscode.Connection.Download.setDownloadPolicy(newPolicy);
    
  }
}

async function connectionErrorHandler(state, error) {
  if (typeof error === "object") {
    return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error);
  }
  var policy = Config$AgdaModeVscode.Connection.Download.getDownloadPolicy();
  return await handleDownloadPolicy(state, policy);
}

async function sendRequest(state, handleResponse, request) {
  var sendRequestAndHandleResponses = async function (connection, state, request, handler) {
    var onResponse = async function (response) {
      await handler(response);
      return Chan$AgdaModeVscode.emit(state.channels.log, {
                  TAG: "ResponseHandled",
                  _0: response,
                  [Symbol.for("name")]: "ResponseHandled"
                });
    };
    Chan$AgdaModeVscode.emit(state.channels.log, {
          TAG: "RequestSent",
          _0: request,
          [Symbol.for("name")]: "RequestSent"
        });
    var error = await Connection$AgdaModeVscode.sendRequest(connection, state.document, request, onResponse);
    if (error.TAG !== "Ok") {
      return await connectionErrorHandler(state, error._0);
    }
    var status = error._0;
    await State__View$AgdaModeVscode.Panel.displayConnectionStatus(state, status);
    if (status.TAG === "Agda") {
      state.agdaVersion = status._0;
    } else {
      state.agdaVersion = status._1;
    }
  };
  var connection = state.connection;
  if (connection !== undefined) {
    return await State__Type$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                  return sendRequestAndHandleResponses(connection, state, request, handleResponse);
                }), request);
  }
  var error = await Connection$AgdaModeVscode.make(state.memento);
  if (error.TAG !== "Ok") {
    return await connectionErrorHandler(state, error._0);
  }
  var connection$1 = error._0;
  state.connection = connection$1;
  return await State__Type$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                return sendRequestAndHandleResponses(connection$1, state, request, handleResponse);
              }), request);
}

async function sendRequestAndCollectResponses(state, request) {
  var responses = {
    contents: []
  };
  var responseHandler = async function (response) {
    responses.contents.push(response);
  };
  await sendRequest(state, responseHandler, request);
  return responses.contents;
}

function destroy(state, alsoRemoveFromRegistry) {
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  state.goals.forEach(Goal$AgdaModeVscode.destroyDecoration);
  Highlighting$AgdaModeVscode.destroy(state.highlighting);
  state.subscriptions.forEach(function (prim) {
        return prim.dispose();
      });
  return Connection$AgdaModeVscode.destroy(state.connection);
}

function make(channels, globalStorageUri, extensionPath, memento, editor) {
  return {
          connection: undefined,
          agdaVersion: undefined,
          editor: editor,
          document: editor.document,
          panelCache: State__Type$AgdaModeVscode.ViewCache.make(),
          runningInfoLog: [],
          goals: [],
          tokens: Tokens$AgdaModeVscode.make(),
          highlighting: Highlighting$AgdaModeVscode.make(),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(channels.inputMethod),
          promptIM: IM$AgdaModeVscode.make(channels.inputMethod),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(),
          agdaRequestQueue: State__Type$AgdaModeVscode.RequestQueue.make(),
          globalStorageUri: globalStorageUri,
          extensionPath: extensionPath,
          memento: State__Memento$AgdaModeVscode.make(memento),
          channels: channels
        };
}

var View;

var Context;

exports.View = View;
exports.Context = Context;
exports.onDownload = onDownload;
exports.handleDownloadPolicy = handleDownloadPolicy;
exports.connectionErrorHandler = connectionErrorHandler;
exports.sendRequest = sendRequest;
exports.sendRequestAndCollectResponses = sendRequestAndCollectResponses;
exports.destroy = destroy;
exports.make = make;
/* vscode Not a pure module */
