// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Agda$AgdaModeVscode = require("./Agda.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Json$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var AVLTree$AgdaModeVscode = require("./Util/AVLTree.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var BinarySearchTree = require("@datastructures-js/binary-search-tree");
var Highlighting__AgdaAspect$AgdaModeVscode = require("./Highlighting/Highlighting__AgdaAspect.bs.js");
var Highlighting__Decoration$AgdaModeVscode = require("./Highlighting/Highlighting__Decoration.bs.js");
var Highlighting__SemanticToken$AgdaModeVscode = require("./Highlighting/Highlighting__SemanticToken.bs.js");

function toString(self) {
  var match = self.source;
  return "Token (" + String(self.start) + ", " + String(self.end_) + ") " + Util$AgdaModeVscode.Pretty.list(Belt_List.fromArray(Belt_Array.map(self.aspects, Highlighting__AgdaAspect$AgdaModeVscode.toString))) + (
          match !== undefined ? " [src: " + String(match[1]) + "]" : ""
        );
}

function parse(x) {
  if (x.TAG === "A") {
    return ;
  }
  var xs = x._0;
  var len = xs.length;
  if (len >= 7) {
    return ;
  }
  switch (len) {
    case 3 :
        var start$p = xs[0];
        if (start$p.TAG !== "A") {
          return ;
        }
        var end_$p = xs[1];
        if (end_$p.TAG !== "A") {
          return ;
        }
        var end_$p$1 = end_$p._0;
        var aspects = xs[2];
        return Belt_Option.flatMap(PervasivesU.int_of_string_opt(start$p._0), (function (start) {
                      return Belt_Option.map(PervasivesU.int_of_string_opt(end_$p$1), (function (end_) {
                                    return {
                                            start: start - 1 | 0,
                                            end_: end_ - 1 | 0,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects), Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 4 :
        var start$p$1 = xs[0];
        if (start$p$1.TAG !== "A") {
          return ;
        }
        var end_$p$2 = xs[1];
        if (end_$p$2.TAG !== "A") {
          return ;
        }
        var end_$p$3 = end_$p$2._0;
        var aspects$1 = xs[2];
        return Belt_Option.flatMap(PervasivesU.int_of_string_opt(start$p$1._0), (function (start) {
                      return Belt_Option.map(PervasivesU.int_of_string_opt(end_$p$3), (function (end_) {
                                    return {
                                            start: start - 1 | 0,
                                            end_: end_ - 1 | 0,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$1), Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 0 :
    case 1 :
    case 2 :
    case 5 :
        return ;
    case 6 :
        var start$p$2 = xs[0];
        if (start$p$2.TAG !== "A") {
          return ;
        }
        var end_$p$4 = xs[1];
        if (end_$p$4.TAG !== "A") {
          return ;
        }
        var end_$p$5 = end_$p$4._0;
        var aspects$2 = xs[2];
        var match = xs[5];
        if (match.TAG === "A") {
          return ;
        }
        var match$1 = match._0;
        if (match$1.length !== 3) {
          return ;
        }
        var filepath = match$1[0];
        if (filepath.TAG !== "A") {
          return ;
        }
        var filepath$1 = filepath._0;
        var index$p = match$1[2];
        if (index$p.TAG !== "A") {
          return ;
        }
        var index$p$1 = index$p._0;
        return Belt_Option.flatMap(PervasivesU.int_of_string_opt(start$p$2._0), (function (start) {
                      return Belt_Option.flatMap(PervasivesU.int_of_string_opt(end_$p$5), (function (end_) {
                                    return Belt_Option.map(PervasivesU.int_of_string_opt(index$p$1), (function (index) {
                                                  return {
                                                          start: start - 1 | 0,
                                                          end_: end_ - 1 | 0,
                                                          aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$2), Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                                          isTokenBased: false,
                                                          note: undefined,
                                                          source: [
                                                            filepath$1,
                                                            index
                                                          ]
                                                        };
                                                }));
                                  }));
                    }));
    
  }
}

function parseDirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map((function (__x) {
                      return Js_array.sliceFrom(2, __x);
                    })(tokens), parse), (function (x) {
                return x;
              }));
}

var decodeToken = Json_Decode$JsonCombinators.map(Util$AgdaModeVscode.Decode.tuple6(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.bool, Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.$$int))), (function (param) {
        return {
                start: param[0] - 1 | 0,
                end_: param[1] - 1 | 0,
                aspects: Belt_Array.map(param[2], Highlighting__AgdaAspect$AgdaModeVscode.parse),
                isTokenBased: param[3],
                note: param[4],
                source: param[5]
              };
      }));

var decodeResponseHighlightingInfoDirect = Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.bool, Json_Decode$JsonCombinators.array(decodeToken)), (function (param) {
        return [
                param[0],
                param[1]
              ];
      }));

var Token = {
  toString: toString,
  parse: parse,
  parseDirectHighlightings: parseDirectHighlightings,
  decodeToken: decodeToken,
  decodeResponseHighlightingInfoDirect: decodeResponseHighlightingInfoDirect
};

async function readAndParse(format) {
  try {
    var fileHandle = await Nodefs.promises.open(format._0, "r");
    var buffer = await fileHandle.readFile();
    if (format.TAG === "Emacs") {
      var match = Belt_Array.get(Parser$AgdaModeVscode.SExpression.parse(buffer.toString()), 0);
      var tokens;
      if (match !== undefined) {
        if (match.TAG === "Ok") {
          var xs = match._0;
          tokens = xs.TAG === "A" ? [] : xs._0;
        } else {
          tokens = [];
        }
      } else {
        tokens = [];
      }
      var match$1 = Belt_Array.get(tokens, 0);
      var removeTokenBasedHighlighting = match$1 !== undefined && match$1.TAG === "A" && match$1._0 === "remove" ? true : false;
      var tokens$1 = Belt_Array.keepMap(Js_array.sliceFrom(1, tokens), parse);
      return [
              removeTokenBasedHighlighting,
              tokens$1
            ];
    }
    var raw = buffer.toString();
    var exit = 0;
    var json;
    try {
      json = JSON.parse(raw);
      exit = 1;
    }
    catch (_e){
      return [
              false,
              []
            ];
    }
    if (exit === 1) {
      var _err = Json$JsonCombinators.decode(json, decodeResponseHighlightingInfoDirect);
      if (_err.TAG === "Ok") {
        var match$2 = _err._0;
        return [
                match$2[0],
                match$2[1]
              ];
      }
      console.log("Error in decoding JSON: " + _err._0);
      return [
              false,
              []
            ];
    }
    
  }
  catch (exn){
    return [
            false,
            []
          ];
  }
}

function make() {
  return {
          tempFiles: [],
          tokens: new BinarySearchTree.BinarySearchTree()
        };
}

function insert(self, editor, tokens) {
  Belt_Array.forEach(tokens, (function (info) {
          var $$document = editor.document;
          var text = Editor$AgdaModeVscode.$$Text.getAll($$document);
          var offsetConverter = Agda$AgdaModeVscode.OffsetConverter.make(text);
          var startOffset = Agda$AgdaModeVscode.OffsetConverter.convert(offsetConverter, info.start);
          var existing = AVLTree$AgdaModeVscode.find(self.tokens, startOffset);
          if (existing !== undefined) {
            var old = existing[0];
            self.tokens.remove(startOffset);
            var newAspects = Caml_obj.equal(old.aspects, info.aspects) ? old.aspects : Belt_Array.concat(old.aspects, info.aspects);
            var new_start = old.start;
            var new_end_ = old.end_;
            var new_isTokenBased = old.isTokenBased;
            var new_note = old.note;
            var new_source = old.source;
            var $$new = {
              start: new_start,
              end_: new_end_,
              aspects: newAspects,
              isTokenBased: new_isTokenBased,
              note: new_note,
              source: new_source
            };
            self.tokens.insert(startOffset, [
                  $$new,
                  existing[1]
                ]);
            return ;
          }
          var start = Editor$AgdaModeVscode.Position.fromOffset($$document, startOffset);
          var end_ = Editor$AgdaModeVscode.Position.fromOffset($$document, Agda$AgdaModeVscode.OffsetConverter.convert(offsetConverter, info.end_));
          var range = new Vscode.Range(start, end_);
          self.tokens.insert(startOffset, [
                info,
                range
              ]);
        }));
}

function addEmacsFilePath(self, filepath) {
  Js_array.push({
        TAG: "Emacs",
        _0: filepath,
        [Symbol.for("name")]: "Emacs"
      }, self.tempFiles);
}

function addJSONFilePath(self, filepath) {
  Js_array.push({
        TAG: "JSON",
        _0: filepath,
        [Symbol.for("name")]: "JSON"
      }, self.tempFiles);
}

async function readTempFiles(self, editor) {
  var xs = await Promise.all(Belt_Array.map(self.tempFiles, readAndParse));
  var tokens = Belt_Array.concatMany(Belt_Array.map(xs, (function (prim) {
              return prim[1];
            })));
  insert(self, editor, tokens);
  self.tempFiles = [];
}

function clear(self) {
  Belt_Array.forEach(self.tempFiles, (function (format) {
          Fs.unlink(format._0, (function (param) {
                  
                }));
        }));
  self.tokens = new BinarySearchTree.BinarySearchTree();
}

function toArray(self) {
  return AVLTree$AgdaModeVscode.toArray(self.tokens);
}

function lookupSrcLoc(self, offset) {
  return Belt_Option.map(Belt_Option.flatMap(AVLTree$AgdaModeVscode.lowerBound(self.tokens, offset), (function (param) {
                    var range = param[1];
                    return Belt_Option.map(param[0].source, (function (param) {
                                  return [
                                          range,
                                          param[0],
                                          param[1]
                                        ];
                                }));
                  })), (function (param) {
                var offset = param[2];
                var filepath = param[1];
                var range = param[0];
                return Vscode.workspace.openTextDocument(filepath).then(function ($$document) {
                            var text = Editor$AgdaModeVscode.$$Text.getAll($$document);
                            var offsetConverter = Agda$AgdaModeVscode.OffsetConverter.make(text);
                            var offset$1 = Agda$AgdaModeVscode.OffsetConverter.convert(offsetConverter, offset - 1 | 0);
                            var position = Editor$AgdaModeVscode.Position.fromOffset($$document, offset$1);
                            return [[
                                      range,
                                      filepath,
                                      position
                                    ]];
                          });
              }));
}

function toDecorationsAndSemanticTokens(tokens, editor) {
  var match = Belt_Array.unzip(Belt_Array.keepMap(Belt_Array.concatMany(Belt_Array.map(AVLTree$AgdaModeVscode.toArray(tokens.tokens), (function (param) {
                      var info = param[0];
                      var ranges = Highlighting__SemanticToken$AgdaModeVscode.Module.SingleLineRange.splitRange(editor.document, param[1]);
                      return Belt_Array.map(ranges, (function (range) {
                                    return [
                                            info.aspects,
                                            range
                                          ];
                                  }));
                    }))), (function (param) {
              var range = param[1];
              var match = Belt_Array.unzip(Belt_Array.map(param[0], Highlighting__AgdaAspect$AgdaModeVscode.toTokenTypeAndModifiersAndDecoration));
              var match$1 = Belt_Array.unzip(match[0]);
              var tokenTypes = Belt_Array.keepMap(match$1[0], (function (x) {
                      return x;
                    }));
              var tokenModifiers = Belt_Array.concatMany(match$1[1]);
              var decorations = Belt_Array.keepMap(match[1], (function (x) {
                      return Belt_Option.map(x, (function (x) {
                                    return [
                                            x,
                                            Highlighting__SemanticToken$AgdaModeVscode.Module.SingleLineRange.toVsCodeRange(range)
                                          ];
                                  }));
                    }));
              var semanticToken = Belt_Option.map(Belt_Array.get(tokenTypes, 0), (function (tokenType) {
                      return {
                              range: range,
                              type_: tokenType,
                              modifiers: tokenModifiers
                            };
                    }));
              return [
                      semanticToken,
                      decorations
                    ];
            })));
  var semanticTokens = Belt_Array.keepMap(match[0], (function (x) {
          return x;
        }));
  var decorations = Highlighting__Decoration$AgdaModeVscode.toVSCodeDecorations(Belt_Array.concatMany(match[1]), editor);
  return [
          decorations,
          semanticTokens
        ];
}

function toDecorations(self, editor) {
  var aspects = Belt_Array.concatMany(Belt_Array.map(AVLTree$AgdaModeVscode.toArray(self.tokens), (function (param) {
              var range = param[1];
              return Belt_Array.map(param[0].aspects, (function (aspect) {
                            return [
                                    aspect,
                                    range
                                  ];
                          }));
            })));
  return Highlighting__Decoration$AgdaModeVscode.toVSCodeDecorations(Belt_Array.keepMap(aspects, (function (param) {
                    var range = param[1];
                    return Belt_Option.map(Highlighting__AgdaAspect$AgdaModeVscode.toDecoration(param[0]), (function (x) {
                                  return [
                                          x,
                                          range
                                        ];
                                }));
                  })), editor);
}

var Module = {
  make: make,
  addEmacsFilePath: addEmacsFilePath,
  addJSONFilePath: addJSONFilePath,
  readTempFiles: readTempFiles,
  insert: insert,
  clear: clear,
  toArray: toArray,
  lookupSrcLoc: lookupSrcLoc,
  toDecorations: toDecorations,
  toDecorationsAndSemanticTokens: toDecorationsAndSemanticTokens
};

var Aspect;

exports.Aspect = Aspect;
exports.Token = Token;
exports.Module = Module;
exports.make = make;
exports.addEmacsFilePath = addEmacsFilePath;
exports.addJSONFilePath = addJSONFilePath;
exports.readTempFiles = readTempFiles;
exports.insert = insert;
exports.clear = clear;
exports.toArray = toArray;
exports.lookupSrcLoc = lookupSrcLoc;
exports.toDecorations = toDecorations;
exports.toDecorationsAndSemanticTokens = toDecorationsAndSemanticTokens;
/* decodeToken Not a pure module */
