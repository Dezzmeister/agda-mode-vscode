// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function toString(x) {
  switch (x) {
    case "Hole" :
        return "Hole";
    case "Comment" :
        return "Comment";
    case "Keyword" :
        return "Keyword";
    case "String" :
        return "String";
    case "Number" :
        return "Number";
    case "Symbol" :
        return "Symbol";
    case "PrimitiveType" :
        return "PrimitiveType";
    case "Pragma" :
        return "Pragma";
    case "Background" :
        return "Background";
    case "Markup" :
        return "Markup";
    case "Error" :
        return "Error";
    case "DottedPattern" :
        return "DottedPattern";
    case "UnsolvedMeta" :
        return "UnsolvedMeta";
    case "UnsolvedConstraint" :
        return "UnsolvedConstraint";
    case "TerminationProblem" :
        return "TerminationProblem";
    case "PositivityProblem" :
        return "PositivityProblem";
    case "Deadcode" :
        return "Deadcode";
    case "CoverageProblem" :
        return "CoverageProblem";
    case "IncompletePattern" :
        return "IncompletePattern";
    case "TypeChecks" :
        return "TypeChecks";
    case "CatchallClause" :
        return "CatchallClause";
    case "ConfluenceProblem" :
        return "ConfluenceProblem";
    case "Bound" :
        return "Bound";
    case "Generalizable" :
        return "Generalizable";
    case "ConstructorInductive" :
        return "ConstructorInductive";
    case "ConstructorCoInductive" :
        return "ConstructorCoInductive";
    case "Datatype" :
        return "Datatype";
    case "Field" :
        return "Field";
    case "Function" :
        return "Function";
    case "Module" :
        return "Module";
    case "Postulate" :
        return "Postulate";
    case "Primitive" :
        return "Primitive";
    case "Record" :
        return "Record";
    case "Argument" :
        return "Argument";
    case "Macro" :
        return "Macro";
    case "Operator" :
        return "Operator";
    
  }
}

function parse(x) {
  switch (x) {
    case "argument" :
        return "Argument";
    case "background" :
        return "Background";
    case "bound" :
        return "Bound";
    case "catchallclause" :
        return "CatchallClause";
    case "coinductiveconstructor" :
        return "ConstructorCoInductive";
    case "comment" :
        return "Comment";
    case "confluenceproblem" :
        return "ConfluenceProblem";
    case "coverageproblem" :
        return "CoverageProblem";
    case "datatype" :
        return "Datatype";
    case "deadcode" :
        return "Deadcode";
    case "dottedpattern" :
        return "DottedPattern";
    case "error" :
        return "Error";
    case "field" :
        return "Field";
    case "function" :
        return "Function";
    case "generalizable" :
        return "Generalizable";
    case "hole" :
        return "Hole";
    case "incompletepattern" :
        return "IncompletePattern";
    case "inductiveconstructor" :
        return "ConstructorInductive";
    case "keyword" :
        return "Keyword";
    case "macro" :
        return "Macro";
    case "markup" :
        return "Markup";
    case "module" :
        return "Module";
    case "number" :
        return "Number";
    case "positivityproblem" :
        return "PositivityProblem";
    case "postulate" :
        return "Postulate";
    case "pragma" :
        return "Pragma";
    case "primitive" :
        return "Primitive";
    case "primitivetype" :
        return "PrimitiveType";
    case "record" :
        return "Record";
    case "string" :
        return "String";
    case "symbol" :
        return "Symbol";
    case "terminationproblem" :
        return "TerminationProblem";
    case "typechecks" :
        return "TypeChecks";
    case "unsolvedconstraint" :
        return "UnsolvedConstraint";
    case "unsolvedmeta" :
        return "UnsolvedMeta";
    default:
      return "Operator";
  }
}

function toDecoration(x) {
  switch (x) {
    case "Comment" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#B0B0B0",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#505050",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Keyword" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#CD6600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#FF9932",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "String" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#B22222",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#DD4D4D",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Number" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#9010E0",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Symbol" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#404040",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#BFBFBF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Error" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "UnsolvedMeta" :
    case "UnsolvedConstraint" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#FFFF00",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#806B00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "TerminationProblem" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#FFA07A",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#802400",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "PositivityProblem" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#CD853F",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#803F00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "Deadcode" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#A9A9A9",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#808080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "CoverageProblem" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#F5DEB3",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#805300",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "IncompletePattern" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "CatchallClause" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#F5F5F5",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#404040",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "ConfluenceProblem" :
        return {
                light: {
                  TAG: "Background",
                  _0: "#FFC0CB",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: "Background",
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case "ConstructorInductive" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#008B00",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#29CC29",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "ConstructorCoInductive" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#996600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#FFEA75",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Field" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#EE1289",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#F570B7",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Module" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#CD80FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "PrimitiveType" :
    case "Datatype" :
    case "Function" :
    case "Postulate" :
    case "Primitive" :
    case "Record" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#0000CD",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#8080FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case "Macro" :
        return {
                light: {
                  TAG: "Foreground",
                  _0: "#458B74",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: "Foreground",
                  _0: "#73BAA2",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    default:
      return ;
  }
}

function toTokenTypeAndModifiersAndDecoration(x) {
  var nothing_0 = [
    undefined,
    []
  ];
  var nothing = [
    nothing_0,
    undefined
  ];
  var backgroundOnly = function (light, dark) {
    return [
            [
              undefined,
              []
            ],
            {
              light: {
                TAG: "Background",
                _0: light,
                [Symbol.for("name")]: "Background"
              },
              dark: {
                TAG: "Background",
                _0: dark,
                [Symbol.for("name")]: "Background"
              }
            }
          ];
  };
  switch (x) {
    case "Comment" :
        return [
                [
                  "Comment",
                  []
                ],
                undefined
              ];
    case "Keyword" :
        return [
                [
                  "Keyword",
                  []
                ],
                undefined
              ];
    case "Number" :
        return [
                [
                  "Number",
                  []
                ],
                undefined
              ];
    case "Error" :
        return [
                [
                  undefined,
                  ["Deprecated"]
                ],
                undefined
              ];
    case "UnsolvedMeta" :
        return backgroundOnly("#FFFF00", "#806B00");
    case "UnsolvedConstraint" :
    case "TerminationProblem" :
        return backgroundOnly("#FFA07A", "#802400");
    case "PositivityProblem" :
        return backgroundOnly("#CD853F", "#803F00");
    case "Deadcode" :
        return backgroundOnly("#A9A9A9", "#808080");
    case "CoverageProblem" :
        return backgroundOnly("#F5DEB3", "#805300");
    case "IncompletePattern" :
        return backgroundOnly("#800080", "#800080");
    case "CatchallClause" :
        return backgroundOnly("#F5F5F5", "#404040");
    case "ConfluenceProblem" :
        return backgroundOnly("#FFC0CB", "#800080");
    case "Bound" :
    case "Generalizable" :
        return [
                [
                  "Variable",
                  []
                ],
                undefined
              ];
    case "ConstructorInductive" :
    case "ConstructorCoInductive" :
        return [
                [
                  "EnumMember",
                  []
                ],
                undefined
              ];
    case "PrimitiveType" :
    case "Datatype" :
        return [
                [
                  "Type",
                  []
                ],
                undefined
              ];
    case "Field" :
        return [
                [
                  "Member",
                  []
                ],
                undefined
              ];
    case "Module" :
        return [
                [
                  "Namespace",
                  []
                ],
                undefined
              ];
    case "Function" :
    case "Postulate" :
        return [
                [
                  "Function",
                  []
                ],
                undefined
              ];
    case "String" :
    case "Primitive" :
        return [
                [
                  "String",
                  []
                ],
                undefined
              ];
    case "Record" :
        return [
                [
                  "Struct",
                  []
                ],
                undefined
              ];
    case "Argument" :
        return [
                [
                  "Parameter",
                  []
                ],
                undefined
              ];
    case "Macro" :
        return [
                [
                  "Macro",
                  []
                ],
                undefined
              ];
    case "Operator" :
        return [
                [
                  "Operator",
                  []
                ],
                undefined
              ];
    default:
      return nothing;
  }
}

exports.toString = toString;
exports.parse = parse;
exports.toDecoration = toDecoration;
exports.toTokenTypeAndModifiersAndDecoration = toTokenTypeAndModifiersAndDecoration;
/* No side effect */
