// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Registry$AgdaModeVscode = require("./Registry.bs.js");
var Singleton$AgdaModeVscode = require("./View/Singleton.bs.js");
var State__Type$AgdaModeVscode = require("./State/State__Type.bs.js");
var State__View$AgdaModeVscode = require("./State/State__View.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var WebviewPanel$AgdaModeVscode = require("./View/WebviewPanel.bs.js");
var State__Command$AgdaModeVscode = require("./State/State__Command.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State/State__InputMethod.bs.js");
var Highlighting__SemanticToken$AgdaModeVscode = require("./Highlighting/Highlighting__SemanticToken.bs.js");

function isAgda(fileName) {
  var fileName$1 = Parser$AgdaModeVscode.filepath(fileName);
  return /\.agda$|\.lagda/i.test(fileName$1);
}

function onOpenEditor(callback) {
  Core__Option.forEach(Vscode.window.activeTextEditor, callback);
  return Vscode.window.onDidChangeActiveTextEditor(function (next) {
              Core__Option.forEach(next, callback);
            });
}

function onCloseDocument(callback) {
  return Vscode.workspace.onDidCloseTextDocument(callback);
}

function onTriggerCommand(callback) {
  return Command$AgdaModeVscode.names.map(function (param) {
              var command = param[0];
              return Vscode.commands.registerCommand("agda-mode." + param[1], (function () {
                            return Core__Option.map(Vscode.window.activeTextEditor, (function (editor) {
                                          var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
                                          if (isAgda(fileName)) {
                                            return callback(command, editor);
                                          } else {
                                            return Promise.resolve(undefined);
                                          }
                                        }));
                          }));
            });
}

var Inputs = {
  onOpenEditor: onOpenEditor,
  onCloseDocument: onCloseDocument,
  onTriggerCommand: onTriggerCommand
};

function initialize(channels, extensionPath, globalStoragePath, editor, fileName) {
  var panel = Singleton$AgdaModeVscode.Panel.make(extensionPath);
  $$Promise.get(WebviewPanel$AgdaModeVscode.onceDestroyed(panel), (function (param) {
          Registry$AgdaModeVscode.removeAndDestroyAll(undefined);
          
        }));
  var state = State$AgdaModeVscode.make(debugChan, globalStoragePath, extensionPath, editor);
  State__View$AgdaModeVscode.Panel.setFontSize(state, Config$AgdaModeVscode.$$Buffer.getFontSize(undefined));
  $$Promise.get(Chan$AgdaModeVscode.once(state.onRemoveFromRegistry), (function (param) {
          return Registry$AgdaModeVscode.remove(fileName);
        }));
  var subscribe = function (disposable) {
    state.subscriptions.push(disposable);
  };
  var getCurrentEditor = function () {
    var editor = Vscode.window.activeTextEditor;
    if (editor !== undefined) {
      return Caml_option.some(Caml_option.valFromOption(editor));
    } else {
      return Vscode.window.visibleTextEditors[0];
    }
  };
  subscribe(WebviewPanel$AgdaModeVscode.onEvent(State__View$AgdaModeVscode.Panel.get(state), (function ($$event) {
              var editor$p = getCurrentEditor();
              if (editor$p === undefined) {
                return ;
              }
              var fileName$p = Parser$AgdaModeVscode.filepath(Caml_option.valFromOption(editor$p).document.fileName);
              if (fileName$p === fileName) {
                State__Command$AgdaModeVscode.dispatchCommand(state, {
                      TAG: "EventFromView",
                      _0: $$event,
                      [Symbol.for("name")]: "EventFromView"
                    });
                return ;
              }
              
            })));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var $$document = editor.document;
            var intervals = $$event.selections.map(function (selection) {
                  return [
                          $$document.offsetAt(selection.start),
                          $$document.offsetAt(selection.end)
                        ];
                });
            State__InputMethod$AgdaModeVscode.select(state, intervals);
          }));
  subscribe(Vscode.workspace.onDidChangeTextDocument(function ($$event) {
            var changes = IM$AgdaModeVscode.Input.fromTextDocumentChangeEvent(editor, $$event);
            State__InputMethod$AgdaModeVscode.keyUpdateEditorIM(state, changes);
          }));
  subscribe(Editor$AgdaModeVscode.Provider.registerDefinitionProvider(function (fileName, position) {
            var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
            var normalizedFileName = Parser$AgdaModeVscode.filepath(fileName);
            var offset = state.document.offsetAt(position);
            if (normalizedFileName === currentFileName) {
              return Tokens$AgdaModeVscode.lookupSrcLoc(state.tokens, offset);
            }
            
          }));
  return state;
}

function registerDocumentSemanticTokensProvider() {
  var tokenTypes = Highlighting__SemanticToken$AgdaModeVscode.TokenType.enumurate;
  var tokenModifiers = Highlighting__SemanticToken$AgdaModeVscode.TokenModifier.enumurate;
  var provideDocumentSemanticTokens = function ($$document, _cancel) {
    var useSemanticHighlighting = Config$AgdaModeVscode.Highlighting.getHighlightWithThemeColors();
    var fileName = Parser$AgdaModeVscode.filepath($$document.fileName);
    if (useSemanticHighlighting) {
      return Caml_option.some(Registry$AgdaModeVscode.requestSemanticTokens(fileName).then(function (tokens) {
                      var semanticTokensLegend = new Vscode.SemanticTokensLegend(tokenTypes, tokenModifiers);
                      var builder = new Vscode.SemanticTokensBuilder(semanticTokensLegend);
                      tokens.forEach(function (param) {
                            builder.push(Highlighting__SemanticToken$AgdaModeVscode.Module.SingleLineRange.toVsCodeRange(param.range), Highlighting__SemanticToken$AgdaModeVscode.TokenType.toString(param.type_), Core__Option.map(param.modifiers, (function (xs) {
                                        return xs.map(Highlighting__SemanticToken$AgdaModeVscode.TokenModifier.toString);
                                      })));
                          });
                      return builder.build();
                    }));
    }
    
  };
  return Editor$AgdaModeVscode.Provider.registerDocumentSemanticTokensProvider(provideDocumentSemanticTokens, [
              tokenTypes,
              tokenModifiers
            ]);
}

function finalize(isRestart) {
  if (Registry$AgdaModeVscode.isEmpty()) {
    Singleton$AgdaModeVscode.Panel.destroy();
    if (!isRestart) {
      return Singleton$AgdaModeVscode.DebugBuffer.destroy();
    } else {
      return ;
    }
  }
  
}

function activateWithoutContext(subscriptions, extensionPath, globalStoragePath) {
  var subscribe = function (x) {
    subscriptions.push(x);
  };
  var subscribeMany = function (xs) {
    Caml_splice_call.spliceObjApply(subscriptions, "push", [xs]);
  };
  var channels_inputMethod = Chan$AgdaModeVscode.make();
  var channels_responseHandled = Chan$AgdaModeVscode.make();
  var channels_commandHandled = Chan$AgdaModeVscode.make();
  var channels_log = Chan$AgdaModeVscode.make();
  var channels = {
    inputMethod: channels_inputMethod,
    responseHandled: channels_responseHandled,
    commandHandled: channels_commandHandled,
    log: channels_log
  };

  var x = onOpenEditor(function (editor) {
        var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
        if (isAgda(fileName)) {
          return Belt_Option.forEach(Registry$AgdaModeVscode.get(fileName), (function (state) {
                        state.editor = editor;
                        state.document = editor.document;
                        State__Command$AgdaModeVscode.dispatchCommand(state, /* Refresh */3);
                        
                      }));
        }
        
      });
  subscriptions.push(x);
  var x$1 = Vscode.workspace.onDidChangeTextDocument(function ($$event) {
        var $$document = $$event.document;
        var fileName = Parser$AgdaModeVscode.filepath($$document.fileName);
        if (isAgda(fileName)) {
          return Belt_Option.forEach(Registry$AgdaModeVscode.get(fileName), (function (state) {
                        return Highlighting$AgdaModeVscode.updateSemanticHighlighting(state.highlighting, $$event);
                      }));
        }
        
      });
  subscriptions.push(x$1);
  var x$2 = Vscode.workspace.onDidChangeConfiguration(function ($$event) {
        var state = Belt_Array.reduce(Vscode.window.visibleTextEditors, undefined, (function (state, editor) {
                if (state !== undefined) {
                  return state;
                } else {
                  return Registry$AgdaModeVscode.get(Parser$AgdaModeVscode.filepath(editor.document.fileName));
                }
              }));
        var fontSizeChanged = $$event.affectsConfiguration("agdaMode.buffer.fontSize", undefined);
        if (!fontSizeChanged) {
          return ;
        }
        var size = Config$AgdaModeVscode.$$Buffer.getFontSize(undefined);
        if (state !== undefined) {
          State__View$AgdaModeVscode.Panel.setFontSize(state, size);
          return ;
        }
        
      });
  subscriptions.push(x$2);
  var x$3 = Vscode.workspace.onDidCloseTextDocument(function ($$document) {
        var fileName = Parser$AgdaModeVscode.filepath($$document.fileName);
        if (isAgda(fileName)) {
          Registry$AgdaModeVscode.removeAndDestroy(fileName);
          finalize(false);
          return ;
        }
        
      });
  subscriptions.push(x$3);
  var xs = onTriggerCommand(function (command, editor) {
        var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
        var tmp;
        if (typeof command === "number" && command < 3) {
          switch (command) {
            case /* Load */0 :
                tmp = $$Promise.resolved(undefined);
                break;
            case /* Quit */1 :
                tmp = $$Promise.flatMap(Registry$AgdaModeVscode.removeAndDestroy(fileName), (function (param) {
                        return finalize(false);
                      }));
                break;
            case /* Restart */2 :
                tmp = $$Promise.flatMap(Registry$AgdaModeVscode.removeAndDestroy(fileName), (function (param) {
                        return finalize(true);
                      }));
                break;
            
          }
        } else {
          tmp = $$Promise.resolved(undefined);
        }
        return $$Promise.flatMap($$Promise.tap(tmp, (function (param) {
                          if (typeof command === "number") {
                            switch (command) {
                              case /* Load */0 :
                              case /* Restart */2 :
                                  break;
                              default:
                                return ;
                            }
                          } else {
                            if (command.TAG !== /* InputMethod */14) {
                              return ;
                            }
                            if (command._0 !== 0) {
                              return ;
                            }
                            
                          }
                          var match = Registry$AgdaModeVscode.get(fileName);
                          if (match !== undefined) {
                            return ;
                          }
                          var state = initialize(channels, extensionPath, globalStoragePath, editor, fileName);
                          return Registry$AgdaModeVscode.add(fileName, state);
                        })), (function (param) {
                      var state = Registry$AgdaModeVscode.get(fileName);
                      if (state !== undefined) {
                        return $$Promise.map(State__Command$AgdaModeVscode.dispatchCommand(state, command), (function (result) {
                                      if (result.TAG === /* Ok */0) {
                                        return {
                                                TAG: 0,
                                                _0: state,
                                                [Symbol.for("name")]: "Ok"
                                              };
                                      } else {
                                        return {
                                                TAG: 1,
                                                _0: result._0,
                                                [Symbol.for("name")]: "Error"
                                              };
                                      }
                                    }));
                      } else {
                        return $$Promise.resolved(undefined);
                      }
                    }));
      });
  Caml_splice_call.spliceObjApply(subscriptions, "push", [xs]);
  var x$4 = registerDocumentSemanticTokensProvider(undefined);
  subscriptions.push(x$4);
  return channels;
}

function activate(context) {
  var subscriptions = context.subscriptions;
  var extensionPath = context.extensionPath;
  var globalStoragePath = context.globalStoragePath;
  return activateWithoutContext(subscriptions, extensionPath, globalStoragePath);
}

function deactivate() {
  
}

exports.isAgda = isAgda;
exports.Inputs = Inputs;
exports.initialize = initialize;
exports.registerDocumentSemanticTokensProvider = registerDocumentSemanticTokensProvider;
exports.finalize = finalize;
exports.activateWithoutContext = activateWithoutContext;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */
