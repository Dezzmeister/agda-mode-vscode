// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Js_array = require("rescript/lib/js/js_array.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var CompareVersions = require("compare-versions");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");

function mapError(x, f) {
  if (x.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: x._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: f(x._0),
            [Symbol.for("name")]: "Error"
          };
  }
}

var Result = {
  mapError: mapError
};

var $$Error = /* @__PURE__ */Caml_exceptions.create("Util-AgdaModeVscode.Error");

function sum(decoder) {
  return Json_Decode$JsonCombinators.flatMap(Json_Decode$JsonCombinators.field("tag", Json_Decode$JsonCombinators.string), (function (tag) {
                var d = decoder(tag);
                if (d.TAG === "Payload") {
                  return Json_Decode$JsonCombinators.field("contents", d._0);
                }
                var d$1 = d._0;
                return Json_Decode$JsonCombinators.custom(function (param) {
                            return d$1;
                          });
              }));
}

function tuple5(decodeA, decodeB, decodeC, decodeD, decodeE) {
  return Json_Decode$JsonCombinators.custom(function (json) {
              if (!Array.isArray(json)) {
                Json_Decode$JsonCombinators.$$Error.expected("array", json);
              }
              if (json.length !== 5) {
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Expected array of length 5, got array of length " + String(json.length),
                      Error: new Error()
                    };
              }
              var run = function (decoder, xs, i) {
                var x = xs[i];
                if (x !== undefined) {
                  var x$1 = Json_Decode$JsonCombinators.decode(x, decoder);
                  if (x$1.TAG === "Ok") {
                    return x$1._0;
                  }
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: x$1._0,
                        Error: new Error()
                      };
                }
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Unable to get index " + String(i),
                      Error: new Error()
                    };
              };
              try {
                return [
                        run(decodeA, json, 0),
                        run(decodeB, json, 1),
                        run(decodeC, json, 2),
                        run(decodeD, json, 3),
                        run(decodeE, json, 4)
                      ];
              }
              catch (raw_msg){
                var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
                if (msg.RE_EXN_ID === Json_Decode$JsonCombinators.DecodeError) {
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: msg._1 + "\n\tin tuple5",
                        Error: new Error()
                      };
                }
                throw msg;
              }
            });
}

function tuple6(decodeA, decodeB, decodeC, decodeD, decodeE, decodeF) {
  return Json_Decode$JsonCombinators.custom(function (json) {
              if (!Array.isArray(json)) {
                Json_Decode$JsonCombinators.$$Error.expected("array", json);
              }
              if (json.length !== 6) {
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Expected array of length 6, got array of length " + String(json.length),
                      Error: new Error()
                    };
              }
              var run = function (decoder, xs, i) {
                var x = xs[i];
                if (x !== undefined) {
                  var x$1 = Json_Decode$JsonCombinators.decode(x, decoder);
                  if (x$1.TAG === "Ok") {
                    return x$1._0;
                  }
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: x$1._0,
                        Error: new Error()
                      };
                }
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Unable to get index " + String(i),
                      Error: new Error()
                    };
              };
              try {
                return [
                        run(decodeA, json, 0),
                        run(decodeB, json, 1),
                        run(decodeC, json, 2),
                        run(decodeD, json, 3),
                        run(decodeE, json, 4),
                        run(decodeF, json, 5)
                      ];
              }
              catch (raw_msg){
                var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
                if (msg.RE_EXN_ID === Json_Decode$JsonCombinators.DecodeError) {
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: msg._1 + "\n\tin tuple6",
                        Error: new Error()
                      };
                }
                throw msg;
              }
            });
}

var Decode = {
  sum: sum,
  tuple5: tuple5,
  tuple6: tuple6
};

function sum$1(f) {
  return function (x) {
    var tag = f(x);
    if (tag.TAG === "Payload") {
      return {
              tag: tag._0,
              contents: tag._1
            };
    } else {
      return {
              tag: tag._0
            };
    }
  };
}

function tuple5$1(encodeA, encodeB, encodeC, encodeD, encodeE, param) {
  return [
          encodeA(param[0]),
          encodeB(param[1]),
          encodeC(param[2]),
          encodeD(param[3]),
          encodeE(param[4])
        ];
}

function tuple6$1(encodeA, encodeB, encodeC, encodeD, encodeE, encodeF, param) {
  return [
          encodeA(param[0]),
          encodeB(param[1]),
          encodeC(param[2]),
          encodeD(param[3]),
          encodeE(param[4]),
          encodeF(param[5])
        ];
}

var Encode = {
  sum: sum$1,
  tuple5: tuple5$1,
  tuple6: tuple6$1
};

function manyIn(elems, elem) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              {},
              elems
            ]);
}

function manyIn2(elems, elem, props) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              props,
              elems
            ]);
}

function sepBy$p(item, sep) {
  if (!item) {
    return React.createElement(React.Fragment, {});
  }
  var xs = item.tl;
  var x = item.hd;
  if (xs) {
    return manyIn(Core__List.toArray({
                    hd: x,
                    tl: Core__List.map(xs, (function (i) {
                            return React.createElement(React.Fragment, {}, sep, i);
                          }))
                  }), "span");
  } else {
    return x;
  }
}

function sepBy(sep, xs) {
  return sepBy$p(Core__List.fromArray(xs), sep);
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, {}, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(x) {
  if (x) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  manyIn: manyIn,
  manyIn2: manyIn2,
  sepBy$p: sepBy$p,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

var partial_arg = /-.*/;

function trim(param) {
  return Js_string.replaceByRe(partial_arg, "", param);
}

function compare(a, b) {
  var match = CompareVersions(Curry._1(trim, a), Curry._1(trim, b));
  if (match !== -1) {
    if (match !== 0) {
      return "GT";
    } else {
      return "EQ";
    }
  } else {
    return "LT";
  }
}

function gte(a, b) {
  var match = compare(a, b);
  switch (match) {
    case "LT" :
        return false;
    case "EQ" :
    case "GT" :
        return true;
    
  }
}

var Version = {
  trim: trim,
  compare: compare,
  gte: gte
};

function array(xs) {
  return "[" + (Js_array.joinWith(", ", xs) + "]");
}

function list(xs) {
  return array(Core__List.toArray(xs));
}

var Pretty = {
  array: array,
  list: list
};

async function oneByOne$p(x) {
  if (!x) {
    return /* [] */0;
  }
  var x$p = await x.hd;
  var result = await oneByOne$p(x.tl);
  return {
          hd: x$p,
          tl: result
        };
}

async function oneByOne(xs) {
  var xs$p = await oneByOne$p(Core__List.fromArray(xs));
  return Core__List.toArray(xs$p);
}

function toString(_e) {
  return (_e.toString());
}

var JsError = {
  toString: toString
};

function span(p, xs) {
  if (!xs) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  var xs$1 = xs.tl;
  var x = xs.hd;
  if (!p(x)) {
    return [
            /* [] */0,
            xs$1
          ];
  }
  var match = span(p, xs$1);
  return [
          {
            hd: x,
            tl: match[0]
          },
          match[1]
        ];
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var xs$1 = xs.tl;
    var x = xs.hd;
    if (!p(x)) {
      return {
              hd: x,
              tl: xs$1
            };
    }
    _xs = xs$1;
    continue ;
  };
}

var List = {
  span: span,
  dropWhile: dropWhile
};

function pending() {
  var resolve = {
    contents: undefined
  };
  var reject = {
    contents: undefined
  };
  var promise = new Promise((function (res, rej) {
          resolve.contents = res;
          reject.contents = rej;
        }));
  var match = resolve.contents;
  var match$1 = reject.contents;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return [
              promise,
              match,
              match$1
            ];
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Promise is not initialized",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: "Promise is not initialized",
        Error: new Error()
      };
}

var Promise_ = {
  pending: pending
};

var $$delete = (function (dict, key) {delete dict[key]});

var Dict = {
  $$delete: $$delete
};

function lines(s) {
  return s.split(/\r\n|\n/g);
}

function unlines(xs) {
  return xs.join("\n");
}

var $$String$1 = {
  lines: lines,
  unlines: unlines
};

var React$p;

exports.Result = Result;
exports.$$Error = $$Error;
exports.Decode = Decode;
exports.Encode = Encode;
exports.React$p = React$p;
exports.React = React$1;
exports.Version = Version;
exports.Pretty = Pretty;
exports.oneByOne$p = oneByOne$p;
exports.oneByOne = oneByOne;
exports.JsError = JsError;
exports.List = List;
exports.Promise_ = Promise_;
exports.Dict = Dict;
exports.$$String = $$String$1;
/* react Not a pure module */
