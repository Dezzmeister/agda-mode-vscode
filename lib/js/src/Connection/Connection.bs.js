// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__Probe$AgdaModeVscode = require("./Connection__Probe.bs.js");
var Connection__Target__ALS$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS.bs.js");
var Connection__Target__Agda$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

var singleton = {
  contents: undefined
};

function toStatus(conn) {
  if (conn.TAG === "Agda") {
    var match = Connection__Target__Agda$AgdaModeVscode.getInfo(conn._0);
    return {
            TAG: "Agda",
            _0: match[0],
            _1: match[1],
            [Symbol.for("name")]: "Agda"
          };
  }
  var conn$1 = conn._0;
  return {
          TAG: "ALS",
          _0: conn$1.version,
          _1: Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn$1),
          [Symbol.for("name")]: "ALS"
        };
}

async function start(globalStorageUri, useALS, onDownload) {
  var conn = singleton.contents;
  if (conn !== undefined) {
    return {
            TAG: "Ok",
            _0: toStatus(conn),
            [Symbol.for("name")]: "Ok"
          };
  }
  if (useALS) {
    var match = await Connection__Probe$AgdaModeVscode.probeLSP(globalStorageUri.toString(), onDownload);
    var result = match[0];
    if (result === undefined) {
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotAcquireHandle",
                _0: "Agda Language Server",
                _1: match[1],
                [Symbol.for("name")]: "CannotAcquireHandle"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var error = await Connection__Target__ALS$AgdaModeVscode.make(result, getFromConfig());
    if (error.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "ALS",
                _0: error._0,
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn$1 = error._0;
    var method = Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn$1);
    singleton.contents = {
      TAG: "ALS",
      _0: conn$1,
      [Symbol.for("name")]: "ALS"
    };
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: conn$1.version,
              _1: method,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var match$1 = await Connection__Probe$AgdaModeVscode.probeEmacs();
  var result$1 = match$1[0];
  if (result$1 !== undefined) {
    var error$1 = await Connection__Target__Agda$AgdaModeVscode.make(result$1);
    if (error$1.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error$1._0,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn$2 = error$1._0;
    singleton.contents = {
      TAG: "Agda",
      _0: conn$2,
      [Symbol.for("name")]: "Agda"
    };
    var match$2 = Connection__Target__Agda$AgdaModeVscode.getInfo(conn$2);
    return {
            TAG: "Ok",
            _0: {
              TAG: "Agda",
              _0: match$2[0],
              _1: match$2[1],
              [Symbol.for("name")]: "Agda"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var name = Config$AgdaModeVscode.Connection.getAgdaVersion();
  return {
          TAG: "Error",
          _0: {
            TAG: "CannotAcquireHandle",
            _0: name,
            _1: match$1[1],
            [Symbol.for("name")]: "CannotAcquireHandle"
          },
          [Symbol.for("name")]: "Error"
        };
}

async function stop() {
  var match = singleton.contents;
  if (match === undefined) {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  if (match.TAG === "Agda") {
    singleton.contents = undefined;
    await Connection__Target__Agda$AgdaModeVscode.destroy(match._0);
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  singleton.contents = undefined;
  var error = await Connection__Target__ALS$AgdaModeVscode.destroy(match._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function sendRequest(globalStorageUri, onDownload, useALS, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  var match = singleton.contents;
  if (match !== undefined) {
    if (match.TAG === "Agda") {
      var conn = match._0;
      var match$1 = Connection__Target__Agda$AgdaModeVscode.getInfo(conn);
      var handler$1 = function (x) {
        return handler(Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                          return {
                                  TAG: "Agda",
                                  _0: err,
                                  [Symbol.for("name")]: "Agda"
                                };
                        })));
      };
      var error = await Connection__Target__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match$1[0]), handler$1);
      if (error.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: toStatus({
                      TAG: "Agda",
                      _0: conn,
                      [Symbol.for("name")]: "Agda"
                    }),
                [Symbol.for("name")]: "Ok"
              };
      }
      await stop();
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn$1 = match._0;
    var handler$2 = function (x) {
      return handler(Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                        return {
                                TAG: "ALS",
                                _0: err,
                                [Symbol.for("name")]: "ALS"
                              };
                      })));
    };
    var error$1 = await Connection__Target__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.version), handler$2);
    if (error$1.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: toStatus({
                    TAG: "ALS",
                    _0: conn$1,
                    [Symbol.for("name")]: "ALS"
                  }),
              [Symbol.for("name")]: "Ok"
            };
    }
    await stop();
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$1._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var error$2 = await start(globalStorageUri, useALS, onDownload);
  if (error$2.TAG === "Ok") {
    return await sendRequest(globalStorageUri, onDownload, useALS, $$document, request, handler);
  } else {
    return {
            TAG: "Error",
            _0: error$2._0,
            [Symbol.for("name")]: "Error"
          };
  }
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest
};

var $$Error;

var Agda;

var ALS;

var Resolver;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.Resolver = Resolver;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest;
/* Util-AgdaModeVscode Not a pure module */
