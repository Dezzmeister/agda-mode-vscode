// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Target__ALS$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS.bs.js");
var Connection__Target__Agda$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

var singleton = {
  contents: undefined
};

function toTarget(conn) {
  return conn._1;
}

async function stop() {
  var match = singleton.contents;
  if (match === undefined) {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  if (match.TAG === "Agda") {
    singleton.contents = undefined;
    await Connection__Target__Agda$AgdaModeVscode.destroy(match._0);
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  singleton.contents = undefined;
  var error = await Connection__Target__ALS$AgdaModeVscode.destroy(match._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function start(state) {
  var conn = singleton.contents;
  if (conn !== undefined) {
    return {
            TAG: "Ok",
            _0: toTarget(conn),
            [Symbol.for("name")]: "Ok"
          };
  }
  var match = await Connection__Target$AgdaModeVscode.getPicked(state);
  if (match === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindAgdaOrALS",
            [Symbol.for("name")]: "Error"
          };
  }
  if (match.TAG === "Agda") {
    var path = match._1;
    var version = match._0;
    var method_1 = [];
    var method_3 = {
      TAG: "FromFile",
      _0: path,
      [Symbol.for("name")]: "FromFile"
    };
    var method = {
      TAG: "ViaPipe",
      _0: path,
      _1: method_1,
      _2: undefined,
      _3: method_3,
      [Symbol.for("name")]: "ViaPipe"
    };
    var error = await Connection__Target__Agda$AgdaModeVscode.make(method);
    if (error.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    singleton.contents = {
      TAG: "Agda",
      _0: error._0,
      _1: {
        TAG: "Agda",
        _0: version,
        _1: path,
        [Symbol.for("name")]: "Agda"
      },
      [Symbol.for("name")]: "Agda"
    };
    return {
            TAG: "Ok",
            _0: {
              TAG: "Agda",
              _0: version,
              _1: path,
              [Symbol.for("name")]: "Agda"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var method$1 = match._2;
  var agdaVersion = match._1;
  var alsVersion = match._0;
  if (method$1.TAG === "Ok") {
    var error$1 = await Connection__Target__ALS$AgdaModeVscode.make(method$1._0, getFromConfig());
    if (error$1.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "ALS",
                _0: error$1._0,
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn$1 = error$1._0;
    var method$2 = Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn$1);
    singleton.contents = {
      TAG: "ALS",
      _0: conn$1,
      _1: {
        TAG: "ALS",
        _0: alsVersion,
        _1: agdaVersion,
        _2: {
          TAG: "Ok",
          _0: method$2,
          [Symbol.for("name")]: "Ok"
        },
        [Symbol.for("name")]: "ALS"
      },
      [Symbol.for("name")]: "ALS"
    };
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: alsVersion,
              _1: conn$1.agdaVersion,
              _2: {
                TAG: "Ok",
                _0: method$2,
                [Symbol.for("name")]: "Ok"
              },
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var path$1 = method$1._0;
  var error$2 = await Connection__Target__ALS$AgdaModeVscode.make({
        TAG: "ViaPipe",
        _0: path$1,
        _1: [],
        _2: undefined,
        _3: {
          TAG: "FromFile",
          _0: path$1,
          [Symbol.for("name")]: "FromFile"
        },
        [Symbol.for("name")]: "ViaPipe"
      }, getFromConfig());
  if (error$2.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$2._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var conn$2 = error$2._0;
  var method$3 = Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn$2);
  singleton.contents = {
    TAG: "ALS",
    _0: conn$2,
    _1: {
      TAG: "ALS",
      _0: alsVersion,
      _1: agdaVersion,
      _2: {
        TAG: "Error",
        _0: path$1,
        [Symbol.for("name")]: "Error"
      },
      [Symbol.for("name")]: "ALS"
    },
    [Symbol.for("name")]: "ALS"
  };
  return {
          TAG: "Ok",
          _0: {
            TAG: "ALS",
            _0: alsVersion,
            _1: conn$2.agdaVersion,
            _2: {
              TAG: "Ok",
              _0: method$3,
              [Symbol.for("name")]: "Ok"
            },
            [Symbol.for("name")]: "ALS"
          },
          [Symbol.for("name")]: "Ok"
        };
}

async function sendRequest(state, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  var match = singleton.contents;
  if (match !== undefined) {
    if (match.TAG === "Agda") {
      var conn = match._0;
      var match$1 = Connection__Target__Agda$AgdaModeVscode.getInfo(conn);
      var handler$1 = function (x) {
        return handler(Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                          return {
                                  TAG: "Agda",
                                  _0: err,
                                  [Symbol.for("name")]: "Agda"
                                };
                        })));
      };
      var error = await Connection__Target__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest(state.document, match$1[0]), handler$1);
      if (error.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: match._1,
                [Symbol.for("name")]: "Ok"
              };
      }
      await stop();
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn$1 = match._0;
    var handler$2 = function (x) {
      return handler(Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                        return {
                                TAG: "ALS",
                                _0: err,
                                [Symbol.for("name")]: "ALS"
                              };
                      })));
    };
    var error$1 = await Connection__Target__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest(state.document, conn$1.agdaVersion), handler$2);
    if (error$1.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: match._1,
              [Symbol.for("name")]: "Ok"
            };
    }
    await stop();
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$1._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var error$2 = await start(state);
  if (error$2.TAG === "Ok") {
    return await sendRequest(state, request, handler);
  } else {
    return {
            TAG: "Error",
            _0: error$2._0,
            [Symbol.for("name")]: "Error"
          };
  }
}

function makeAgdaLanguageServerRepo(globalStoragePath) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          globalStoragePath: globalStoragePath,
          cacheInvalidateExpirationSecs: 86400
        };
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest,
  makeAgdaLanguageServerRepo: makeAgdaLanguageServerRepo
};

var $$Error;

var Agda;

var ALS;

var Resolver;

var Target;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.Resolver = Resolver;
exports.Target = Target;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest;
exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
/* Util-AgdaModeVscode Not a pure module */
