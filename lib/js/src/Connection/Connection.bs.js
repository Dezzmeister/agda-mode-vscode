// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Target__ALS$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS.bs.js");
var Connection__Target__Agda$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda.bs.js");
var Connection__Command__Search$AgdaModeVscode = require("./Connection__Command__Search.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Download/Connection__Download__GitHub.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

async function destroy(connection) {
  if (connection === undefined) {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  if (connection.TAG === "Agda") {
    await Connection__Target__Agda$AgdaModeVscode.destroy(connection._0);
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  var error = await Connection__Target__ALS$AgdaModeVscode.destroy(connection._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function start_(target) {
  if (target.TAG === "Agda") {
    var path = target._1;
    var method_1 = [];
    var method_3 = {
      TAG: "FromFile",
      _0: path,
      [Symbol.for("name")]: "FromFile"
    };
    var method = {
      TAG: "ViaPipe",
      _0: path,
      _1: method_1,
      _2: undefined,
      _3: method_3,
      [Symbol.for("name")]: "ViaPipe"
    };
    var error = await Connection__Target__Agda$AgdaModeVscode.make(method);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: {
                  TAG: "Agda",
                  _0: target._0,
                  _1: path,
                  [Symbol.for("name")]: "Agda"
                },
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Ok"
            };
    } else {
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: path,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
  }
  var method$1 = target._2;
  var agdaVersion = target._1;
  var alsVersion = target._0;
  if (method$1.TAG === "Ok") {
    var error$1 = await Connection__Target__ALS$AgdaModeVscode.make(method$1._0, getFromConfig());
    if (error$1.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "ALS",
                _0: error$1._0,
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn = error$1._0;
    var method$2 = Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn);
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: conn,
              _1: {
                TAG: "ALS",
                _0: alsVersion,
                _1: agdaVersion,
                _2: {
                  TAG: "Ok",
                  _0: method$2,
                  [Symbol.for("name")]: "Ok"
                },
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var path$1 = method$1._0;
  var error$2 = await Connection__Target__ALS$AgdaModeVscode.make({
        TAG: "ViaPipe",
        _0: path$1,
        _1: [],
        _2: undefined,
        _3: {
          TAG: "FromFile",
          _0: path$1,
          [Symbol.for("name")]: "FromFile"
        },
        [Symbol.for("name")]: "ViaPipe"
      }, getFromConfig());
  if (error$2.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: error$2._0,
              _1: {
                TAG: "ALS",
                _0: alsVersion,
                _1: agdaVersion,
                _2: {
                  TAG: "Error",
                  _0: path$1,
                  [Symbol.for("name")]: "Error"
                },
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$2._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function findCommand(command) {
  var _error = await Connection__Command__Search$AgdaModeVscode.search(command, undefined);
  if (_error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: "CannotFindALSorAgda",
            [Symbol.for("name")]: "Error"
          };
  }
  var path = _error._0;
  var error = await Connection__Target$AgdaModeVscode.fromRawPath(path);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0,
            [Symbol.for("name")]: "Error"
          };
  }
  await Config$AgdaModeVscode.Connection.addAgdaPath(path);
  return await start_(error._0);
}

async function findALSAndAgda() {
  var _error = await findCommand("als");
  if (_error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: _error._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return await findCommand("agda");
  }
}

async function make(memento) {
  var target = await Connection__Target$AgdaModeVscode.getPicked(memento);
  if (target !== undefined) {
    return await start_(target);
  } else {
    return await findALSAndAgda();
  }
}

async function sendRequest(connection, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  if (connection.TAG === "Agda") {
    var target = connection._1;
    var conn = connection._0;
    var match = Connection__Target__Agda$AgdaModeVscode.getInfo(conn);
    var error = await Connection__Target__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match[0]), handler);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: target,
              [Symbol.for("name")]: "Ok"
            };
    }
    await destroy({
          TAG: "Agda",
          _0: conn,
          _1: target,
          [Symbol.for("name")]: "Agda"
        });
    return {
            TAG: "Error",
            _0: {
              TAG: "Agda",
              _0: error._0,
              _1: match[1],
              [Symbol.for("name")]: "Agda"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var target$1 = connection._1;
  var conn$1 = connection._0;
  var error$1 = await Connection__Target__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.agdaVersion), handler);
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: target$1,
            [Symbol.for("name")]: "Ok"
          };
  }
  await destroy({
        TAG: "ALS",
        _0: conn$1,
        _1: target$1,
        [Symbol.for("name")]: "ALS"
      });
  return {
          TAG: "Error",
          _0: {
            TAG: "ALS",
            _0: error$1._0,
            [Symbol.for("name")]: "ALS"
          },
          [Symbol.for("name")]: "Error"
        };
}

function makeAgdaLanguageServerRepo(memento, globalStoragePath) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          memento: memento,
          globalStoragePath: globalStoragePath,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function getALSReleaseManifest(memento, globalStorageUri) {
  var match = await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.$$fetch(makeAgdaLanguageServerRepo(memento, globalStorageUri.fsPath));
  var error = match[0];
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotFetchALSReleases",
              _0: error._0,
              [Symbol.for("name")]: "CannotFetchALSReleases"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest,
  findCommand: findCommand,
  makeAgdaLanguageServerRepo: makeAgdaLanguageServerRepo,
  getALSReleaseManifest: getALSReleaseManifest
};

var $$Error;

var Agda;

var ALS;

var Target;

var URI;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.Target = Target;
exports.URI = URI;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.findCommand = findCommand;
exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.getALSReleaseManifest = getALSReleaseManifest;
/* Config-AgdaModeVscode Not a pure module */
