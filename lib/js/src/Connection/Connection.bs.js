// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodefs = require("node:fs");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Nodepath = require("node:path");
var Core__Date = require("@rescript/core/lib/js/src/Core__Date.bs.js");
var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__URI$AgdaModeVscode = require("./Connection__URI.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Target__ALS$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS.bs.js");
var Connection__Target__Agda$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda.bs.js");
var Connection__Command__Search$AgdaModeVscode = require("./Connection__Command__Search.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Download/Connection__Download__GitHub.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("./Download/Connection__Download__Platform.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

async function destroy(connection) {
  if (connection === undefined) {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  if (connection.TAG === "Agda") {
    await Connection__Target__Agda$AgdaModeVscode.destroy(connection._0);
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  }
  var error = await Connection__Target__ALS$AgdaModeVscode.destroy(connection._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function makeWithTarget(target) {
  if (target.TAG === "Agda") {
    var path = target._1;
    var version = target._0;
    var method_1 = [];
    var method_3 = {
      TAG: "FromFile",
      _0: path,
      [Symbol.for("name")]: "FromFile"
    };
    var method = {
      TAG: "ViaPipe",
      _0: path,
      _1: method_1,
      _2: undefined,
      _3: method_3,
      [Symbol.for("name")]: "ViaPipe"
    };
    var error = await Connection__Target__Agda$AgdaModeVscode.make(method, version, path);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: {
                  TAG: "Agda",
                  _0: version,
                  _1: path,
                  [Symbol.for("name")]: "Agda"
                },
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Ok"
            };
    } else {
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: path,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Error"
            };
    }
  }
  var method$1 = target._2;
  var agdaVersion = target._1;
  var alsVersion = target._0;
  if (method$1.TAG === "Ok") {
    var error$1 = await Connection__Target__ALS$AgdaModeVscode.make(method$1._0, getFromConfig());
    if (error$1.TAG !== "Ok") {
      return {
              TAG: "Error",
              _0: {
                TAG: "ALS",
                _0: error$1._0,
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    var conn = error$1._0;
    var method$2 = Connection__Target__ALS$AgdaModeVscode.getIPCMethod(conn);
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: conn,
              _1: {
                TAG: "ALS",
                _0: alsVersion,
                _1: agdaVersion,
                _2: {
                  TAG: "Ok",
                  _0: method$2,
                  [Symbol.for("name")]: "Ok"
                },
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  }
  var path$1 = method$1._0;
  var error$2 = await Connection__Target__ALS$AgdaModeVscode.make({
        TAG: "ViaPipe",
        _0: path$1,
        _1: [],
        _2: undefined,
        _3: {
          TAG: "FromFile",
          _0: path$1,
          [Symbol.for("name")]: "FromFile"
        },
        [Symbol.for("name")]: "ViaPipe"
      }, getFromConfig());
  if (error$2.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: error$2._0,
              _1: {
                TAG: "ALS",
                _0: alsVersion,
                _1: agdaVersion,
                _2: {
                  TAG: "Error",
                  _0: path$1,
                  [Symbol.for("name")]: "Error"
                },
                [Symbol.for("name")]: "ALS"
              },
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$2._0,
              [Symbol.for("name")]: "ALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function findCommands(commands) {
  var commands$1 = Core__List.fromArray(commands);
  var step = async function (acc, commands) {
    if (!commands) {
      return {
              TAG: "Error",
              _0: acc,
              [Symbol.for("name")]: "Error"
            };
    }
    var command = commands.hd;
    var path = await Connection__Command__Search$AgdaModeVscode.search(command, undefined);
    if (path.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: path._0,
              [Symbol.for("name")]: "Ok"
            };
    } else {
      return await step({
                  hd: [
                    command,
                    path._0
                  ],
                  tl: acc
                }, commands.tl);
    }
  };
  var errorPairs = await step(/* [] */0, commands$1);
  if (errorPairs.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: errorPairs._0,
            [Symbol.for("name")]: "Ok"
          };
  }
  var errorPairs$1 = Core__List.map(errorPairs._0, (function (param) {
          return {
                  command: param[0],
                  error: param[1]
                };
        }));
  return {
          TAG: "Error",
          _0: Core__List.toArray(errorPairs$1),
          [Symbol.for("name")]: "Error"
        };
}

async function make(memento, paths, commands, platform) {
  var targetErrors = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
  if (targetErrors.TAG === "Ok") {
    return await makeWithTarget(targetErrors._0);
  }
  Core__List.toArray(Core__List.zipBy(Core__List.fromArray(paths), Core__List.fromArray(targetErrors._0), (function (uri, error) {
              return {
                      uri: uri,
                      error: error
                    };
            })));
  var commandErrors = await findCommands(commands);
  if (commandErrors.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CommandsNotFound",
              _0: commandErrors._0,
              [Symbol.for("name")]: "CommandsNotFound"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var target = await Connection__Target$AgdaModeVscode.fromRawPath(commandErrors._0);
  if (target.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "Target",
              _0: target._0,
              [Symbol.for("name")]: "Target"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var target$1 = target._0;
  await Config$AgdaModeVscode.Connection.addAgdaPath(Connection__Target$AgdaModeVscode.toURI(target$1));
  return await makeWithTarget(target$1);
}

async function sendRequest(connection, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  if (connection.TAG === "Agda") {
    var target = connection._1;
    var conn = connection._0;
    var match = Connection__Target__Agda$AgdaModeVscode.getInfo(conn);
    var error = await Connection__Target__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match[0]), handler);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: target,
              [Symbol.for("name")]: "Ok"
            };
    }
    await destroy({
          TAG: "Agda",
          _0: conn,
          _1: target,
          [Symbol.for("name")]: "Agda"
        });
    return {
            TAG: "Error",
            _0: {
              TAG: "Agda",
              _0: error._0,
              _1: match[1],
              [Symbol.for("name")]: "Agda"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var target$1 = connection._1;
  var conn$1 = connection._0;
  var error$1 = await Connection__Target__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.agdaVersion), handler);
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: target$1,
            [Symbol.for("name")]: "Ok"
          };
  }
  await destroy({
        TAG: "ALS",
        _0: conn$1,
        _1: target$1,
        [Symbol.for("name")]: "ALS"
      });
  return {
          TAG: "Error",
          _0: {
            TAG: "ALS",
            _0: error$1._0,
            [Symbol.for("name")]: "ALS"
          },
          [Symbol.for("name")]: "Error"
        };
}

function makeAgdaLanguageServerRepo(memento, globalStorageUri) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          memento: memento,
          globalStoragePath: globalStorageUri.fsPath,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function getALSReleaseManifest(memento, globalStorageUri) {
  var match = await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.$$fetch(makeAgdaLanguageServerRepo(memento, globalStorageUri));
  var error = match[0];
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotFetchALSReleases",
              _0: error._0,
              [Symbol.for("name")]: "CannotFetchALSReleases"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function chooseAssetFromRelease(release) {
  var platform = await Connection__Download__Platform$AgdaModeVscode.determine();
  if (platform === undefined) {
    return [];
  }
  var assetName = Connection__Download__Platform$AgdaModeVscode.toAssetName(platform);
  return release.assets.filter(function (asset) {
              return asset.name.endsWith(assetName + ".zip");
            });
}

async function getTarget(memento, globalStorageUri) {
  var error = await getALSReleaseManifest(memento, globalStorageUri);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0,
            [Symbol.for("name")]: "Error"
          };
  }
  var laterReleases = error._0.filter(function (release) {
        return Caml_obj.greaterequal(new Date(release.published_at), new Date("2024-12-18"));
      });
  var latestRelease = laterReleases.toSorted(function (a, b) {
          return Core__Date.compare(new Date(b.published_at), new Date(a.published_at));
        })[0];
  if (latestRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease",
            [Symbol.for("name")]: "Error"
          };
  }
  var getAgdaVersion = function (asset) {
    return asset.name.replace(/als-Agda-/, "").replace(/-.*/, "");
  };
  var assets = await chooseAssetFromRelease(latestRelease);
  var result = assets.toSorted(function (a, b) {
            return Util$AgdaModeVscode.Version.compare(getAgdaVersion(b), getAgdaVersion(a));
          }).map(function (asset) {
          return {
                  release: latestRelease,
                  asset: asset,
                  saveAsFileName: "latest-als"
                };
        })[0];
  if (result !== undefined) {
    return {
            TAG: "Ok",
            _0: result,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease",
            [Symbol.for("name")]: "Error"
          };
  }
}

async function alreadyDownloaded(globalStoragePath) {
  var path = Nodepath.join(globalStoragePath, "latest-als");
  try {
    await Nodefs.promises.access(path);
    return true;
  }
  catch (exn){
    return false;
  }
}

async function download(memento, globalStoragePath, reportProgress, target) {
  var e = await Connection__Download__GitHub$AgdaModeVscode.download(target, memento, globalStoragePath, reportProgress);
  if (e.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: e._0,
            [Symbol.for("name")]: "Error"
          };
  }
  var destPath = Connection__URI$AgdaModeVscode.parse(Nodepath.join(globalStoragePath, target.saveAsFileName, "als"));
  await Config$AgdaModeVscode.Connection.addAgdaPath(destPath);
  return {
          TAG: "Ok",
          _0: undefined,
          [Symbol.for("name")]: "Ok"
        };
}

function isLatestALSDownloaded(globalStorageUri) {
  return alreadyDownloaded(globalStorageUri.fsPath);
}

async function downloadLatestALS(memento, globalStorageUri, reportProgress) {
  var error = await getTarget(memento, globalStorageUri);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0,
            [Symbol.for("name")]: "Error"
          };
  }
  var target = error._0;
  var e = await download(memento, globalStorageUri.fsPath, reportProgress, target);
  if (e.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: target,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotDownloadALS",
              _0: e._0,
              [Symbol.for("name")]: "CannotDownloadALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest,
  findCommands: findCommands,
  makeAgdaLanguageServerRepo: makeAgdaLanguageServerRepo,
  getALSReleaseManifest: getALSReleaseManifest,
  isLatestALSDownloaded: isLatestALSDownloaded,
  downloadLatestALS: downloadLatestALS
};

var $$Error;

var Agda;

var ALS;

var Target;

var URI;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.Target = Target;
exports.URI = URI;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.findCommands = findCommands;
exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.getALSReleaseManifest = getALSReleaseManifest;
exports.isLatestALSDownloaded = isLatestALSDownloaded;
exports.downloadLatestALS = downloadLatestALS;
/* node:fs Not a pure module */
