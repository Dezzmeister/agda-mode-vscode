// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Parser$AgdaModeVscode = require("../../Parser/Parser.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");

function toString(x) {
  if (x.TAG === "CannotDecodeJSON") {
    return "Cannot decode JSON: \n" + x._0;
  } else {
    return "Cannot read IOTCM: \n" + x._0;
  }
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "CmdErrCannotDecodeJSON" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (version) {
                            return {
                                    TAG: "CannotDecodeJSON",
                                    _0: version,
                                    [Symbol.for("name")]: "CannotDecodeJSON"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "CmdErrCannotParseCommand" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (version) {
                            return {
                                    TAG: "CannotParseCommand",
                                    _0: version,
                                    [Symbol.for("name")]: "CannotParseCommand"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[Connection.LSP.Error.CommandErr] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var CommandErr = {
  toString: toString,
  decode: decode
};

function toString$1(error) {
  if (typeof error !== "object") {
    return [
            "Cannot Initialize Connection",
            ""
          ];
  }
  switch (error.TAG) {
    case "ConnectionError" :
        var exn = error._0;
        var isECONNREFUSED = Belt_Option.mapWithDefault(exn.message, false, (function (param) {
                return Js_string.startsWith("connect ECONNREFUSED", param);
              }));
        if (isECONNREFUSED) {
          return [
                  "Connection Error",
                  "Please enter \":main -d\" in ghci"
                ];
        } else {
          return [
                  "Client Internal Connection Error",
                  Belt_Option.getWithDefault(exn.message, "")
                ];
        }
    case "SendCommand" :
        return [
                "Cannot Send Command",
                toString(error._0)
              ];
    case "CannotDecodeCommandRes" :
        return [
                "Cannot Send Command",
                "Cannot decode the result after sending command" + error._0 + "\n" + JSON.stringify(error._1)
              ];
    case "CannotDecodeResponse" :
        return [
                "Cannot Parse Response",
                "Cannot decode responses from the server" + error._0 + "\n" + JSON.stringify(error._1)
              ];
    case "ResponseParseError" :
        return [
                "Internal Parse Error",
                Parser$AgdaModeVscode.$$Error.toString(error._0)
              ];
    
  }
}

exports.CommandErr = CommandErr;
exports.toString = toString$1;
/* decode Not a pure module */
