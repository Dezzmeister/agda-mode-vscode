// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodeos = require("node:os");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("./Process/Connection__Process__Exec.bs.js");

function toString(x) {
  if (typeof x !== "object") {
    return "Cannot find the executable on PATH";
  }
  switch (x.TAG) {
    case "NotSupported" :
        return "Path searching is not supported on \"" + x._0 + "\"";
    case "OnError" :
        return "Got error when looking for the executable: " + Util$AgdaModeVscode.JsError.toString(x._0);
    case "OnError2" :
        return "Got error when looking for the executable: " + Connection__Process__Exec$AgdaModeVscode.$$Error.toString(x._0);
    case "OnStderr" :
        return "Got something from the stderr when looking for the executable: " + x._0;
    
  }
}

var $$Error = {
  toString: toString
};

async function searchWithCommand(command, name) {
  var output = await Connection__Process__Exec$AgdaModeVscode.run(command, [name]);
  if (output.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: output._0.trim(),
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "OnError2",
              _0: output._0,
              [Symbol.for("name")]: "OnError2"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

function search(name, timeoutOpt) {
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 1000;
  var timeout$1 = async function () {
    await Util$AgdaModeVscode.Promise_.$$setTimeout(timeout);
    return {
            TAG: "Error",
            _0: "NotFound",
            [Symbol.for("name")]: "Error"
          };
  };
  var search$1 = async function () {
    var os = Nodeos.type();
    switch (os) {
      case "Darwin" :
      case "Linux" :
          return await searchWithCommand("which", name);
      case "Windows_NT" :
          var stdout = await searchWithCommand("which", name);
          if (stdout.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: stdout._0,
                    [Symbol.for("name")]: "Ok"
                  };
          } else {
            return await searchWithCommand("where.exe", name);
          }
      default:
        return {
                TAG: "Error",
                _0: {
                  TAG: "NotSupported",
                  _0: os,
                  [Symbol.for("name")]: "NotSupported"
                },
                [Symbol.for("name")]: "Error"
              };
    }
  };
  return Promise.race([
              search$1(),
              timeout$1()
            ]);
}

exports.$$Error = $$Error;
exports.searchWithCommand = searchWithCommand;
exports.search = search;
/* node:os Not a pure module */
