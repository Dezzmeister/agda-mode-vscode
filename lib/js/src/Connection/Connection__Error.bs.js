// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Connection__Validation$AgdaModeVscode = require("./Connection__Validation.bs.js");
var Connection__Command__Search$AgdaModeVscode = require("./Connection__Command__Search.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Download/Connection__Download__GitHub.bs.js");
var Connection__Target__ALS__Error$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS__Error.bs.js");
var Connection__Target__Agda__Error$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda__Error.bs.js");

function toString(x) {
  switch (x.TAG) {
    case "Agda" :
        return Connection__Target__Agda__Error$AgdaModeVscode.toString(x._0);
    case "ALS" :
        return Connection__Target__ALS__Error$AgdaModeVscode.toString(x._0);
    case "CannotFindCommand" :
        return [
                "Cannot find command \"" + x._0 + "\"",
                Connection__Command__Search$AgdaModeVscode.$$Error.toString(x._1)
              ];
    case "CannotFetchALSReleases" :
        return [
                "Cannot fetch ALS releases",
                Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(x._0)
              ];
    case "CannotHandleURLsATM" :
        return [
                "Cannot handle URLs at the moment",
                "This will be supported again in the future"
              ];
    case "NotAgdaOrALS" :
        return [
                "Not Agda or ALS",
                "`" + x._0 + "` doesn't seem to be an Agda executable or an Agda Language Server"
              ];
    case "ValidationError" :
        return [
                "Error",
                Connection__Validation$AgdaModeVscode.$$Error.toString(x._1)
              ];
    
  }
}

exports.toString = toString;
/* Connection__Validation-AgdaModeVscode Not a pure module */
