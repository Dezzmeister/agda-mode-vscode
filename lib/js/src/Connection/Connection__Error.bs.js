// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Connection__URI$AgdaModeVscode = require("./Connection__URI.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("./Process/Connection__Process__Exec.bs.js");
var Connection__Download__Error$AgdaModeVscode = require("./Download/Connection__Download__Error.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Download/Connection__Download__GitHub.bs.js");
var Connection__Target__ALS__Error$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS__Error.bs.js");
var Connection__Target__Agda__Error$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda__Error.bs.js");

function attempsToString(attempts) {
  return (
          attempts.targets.length === 0 ? "Tried to connect with the path from the configuration but there are none.\n" : "Tried to connect with the path from the configuration but all failed:\n" + attempts.targets.map(function (attempt) {
                    return Connection__URI$AgdaModeVscode.toString(attempt.uri) + Connection__Target$AgdaModeVscode.$$Error.toString(attempt.error);
                  }).join("\n")
        ) + (
          attempts.commands.length === 0 ? "" : attempts.commands.map(function (attempt) {
                    var e = attempt.error;
                    var tmp;
                    if (e.TAG === "Ok") {
                      var e$1 = e._0;
                      tmp = e$1 !== undefined ? "Cannot find `" + attempt.command + "` because: " + Connection__Process__Exec$AgdaModeVscode.$$Error.toString(e$1) + "." : "Cannot find `" + attempt.command + "` in PATH";
                    } else {
                      tmp = "Found the `" + attempt.command + "` command but failed to run it because: " + Connection__Target$AgdaModeVscode.$$Error.toString(e._0);
                    }
                    return "Tried to run the `" + attempt.command + "` command but failed:\n" + tmp;
                  }).join("\n")
        );
}

function toString(x) {
  switch (x.TAG) {
    case "PlatformNotSupported" :
        return attempsToString(x._0) + "\nTried to download the Agda Language Server but the platform `" + x._1 + "` is not supported.\n";
    case "NoDownloadALS" :
        return attempsToString(x._0) + "\nPrebuilt Agda Language Server available for download but you opted not to.\n";
    case "DownloadALS" :
        return attempsToString(x._0) + "\nTried to download the Agda Language Server but failed:\n" + Connection__Download__Error$AgdaModeVscode.toString(x._1);
    
  }
}

var Aggregated = {
  attempsToString: attempsToString,
  toString: toString
};

function toString$1(x) {
  if (typeof x !== "object") {
    return [
            "Cannot find compatible Agda Language Server release for download",
            "Prebuilts are only available for download on Ubuntu, Windows, and macOS (arm64, x64).\nPlease build from source if you are on a different platform. \nSee https://github.com/agda/agda-language-server for more information."
          ];
  }
  switch (x.TAG) {
    case "Agda" :
        return Connection__Target__Agda__Error$AgdaModeVscode.toString(x._0);
    case "ALS" :
        return Connection__Target__ALS__Error$AgdaModeVscode.toString(x._0);
    case "CommandsNotFound" :
        return [
                "Cannot find the `agda` or `als` commands",
                x._0.map(function (param) {
                        var error = param[1];
                        var command = param[0];
                        if (error !== undefined) {
                          return "Cannot find `" + command + "` because: " + Connection__Process__Exec$AgdaModeVscode.$$Error.toString(error) + ".";
                        } else {
                          return "Cannot find `" + command + "` in PATH";
                        }
                      }).join("\n") + "\n\nIf `agda` or `als` is installed somewhere outside of PATH, please add the path to the configuration at `agdaMode.connection.paths`."
              ];
    case "Target" :
        return [
                "Error",
                Connection__Target$AgdaModeVscode.$$Error.toString(x._0)
              ];
    case "Download" :
        return [
                "Error",
                Connection__Download__Error$AgdaModeVscode.toString(x._0)
              ];
    case "CannotFetchALSReleases" :
        return [
                "Cannot fetch releases of Agda Language Server",
                Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(x._0)
              ];
    case "CannotDownloadALS" :
        return [
                "Failed download the Agda Language Server",
                Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(x._0)
              ];
    case "Aggregated" :
        return [
                "Error",
                toString(x._0)
              ];
    
  }
}

exports.Aggregated = Aggregated;
exports.toString = toString$1;
/* Connection__URI-AgdaModeVscode Not a pure module */
