// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodefs = require("node:fs");
var Nodepath = require("node:path");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var State__Type$AgdaModeVscode = require("../State/State__Type.bs.js");
var Connection__URI$AgdaModeVscode = require("./Connection__URI.bs.js");
var Connection__Validation$AgdaModeVscode = require("./Connection__Validation.bs.js");
var Connection__Resolver__GitHub$AgdaModeVscode = require("./Resolver/Connection__Resolver__GitHub.bs.js");

async function fromURI(uri) {
  if (uri.TAG !== "Filepath") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotResolvePath",
              _0: uri._0.toString(),
              [Symbol.for("name")]: "CannotResolvePath"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var path = uri._0;
  var result = await Connection__Validation$AgdaModeVscode.run(path, ["--version"], (function (output) {
          return {
                  TAG: "Ok",
                  _0: output,
                  [Symbol.for("name")]: "Ok"
                };
        }));
  if (result.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "ValidationError",
              _0: path,
              _1: result._0,
              [Symbol.for("name")]: "ValidationError"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var output = result._0;
  var match = output.match(/Agda version (.*)/);
  if (!(match == null) && match.length === 2) {
    var version = match[1];
    if (version !== undefined) {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: version,
                _1: path,
                [Symbol.for("name")]: "Agda"
              },
              [Symbol.for("name")]: "Ok"
            };
    }
    
  }
  var match$1 = output.match(/Agda v(.*) Language Server v(.*)/);
  if (match$1 == null) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: path,
              [Symbol.for("name")]: "NotAgdaOrALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  if (match$1.length !== 3) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: path,
              [Symbol.for("name")]: "NotAgdaOrALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var agdaVersion = match$1[1];
  if (agdaVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: path,
              [Symbol.for("name")]: "NotAgdaOrALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var alsVersion = match$1[2];
  if (alsVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: path,
              [Symbol.for("name")]: "NotAgdaOrALS"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var prebuildDataDirPath = Nodepath.join(path, "..", "data");
  var isPrebuilt;
  try {
    await Nodefs.promises.access(prebuildDataDirPath);
    isPrebuilt = true;
  }
  catch (exn){
    isPrebuilt = false;
  }
  var lspOptions;
  if (isPrebuilt) {
    var assetPath = Nodepath.join(path, "..", "data");
    var env = Object.fromEntries([[
            "Agda_datadir",
            assetPath
          ]]);
    lspOptions = {
      env: env
    };
  } else {
    lspOptions = undefined;
  }
  return {
          TAG: "Ok",
          _0: {
            TAG: "ALS",
            _0: alsVersion,
            _1: agdaVersion,
            _2: {
              TAG: "Ok",
              _0: {
                TAG: "ViaPipe",
                _0: path,
                _1: [],
                _2: lspOptions,
                _3: {
                  TAG: "FromFile",
                  _0: path,
                  [Symbol.for("name")]: "FromFile"
                },
                [Symbol.for("name")]: "ViaPipe"
              },
              [Symbol.for("name")]: "Ok"
            },
            [Symbol.for("name")]: "ALS"
          },
          [Symbol.for("name")]: "Ok"
        };
}

async function fromRawPath(rawPath) {
  var uri = await Connection__URI$AgdaModeVscode.parse(rawPath);
  if (uri !== undefined) {
    return await fromURI(uri);
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotResolvePath",
              _0: rawPath,
              [Symbol.for("name")]: "CannotResolvePath"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

function toURI(target) {
  if (target.TAG === "Agda") {
    return {
            TAG: "Filepath",
            _0: target._1,
            [Symbol.for("name")]: "Filepath"
          };
  }
  var path = target._2;
  if (path.TAG !== "Ok") {
    return {
            TAG: "Filepath",
            _0: path._0,
            [Symbol.for("name")]: "Filepath"
          };
  }
  var match = path._0;
  if (match.TAG === "ViaPipe") {
    return {
            TAG: "Filepath",
            _0: match._0,
            [Symbol.for("name")]: "Filepath"
          };
  } else {
    return {
            TAG: "URL",
            _0: match._0,
            [Symbol.for("name")]: "URL"
          };
  }
}

function getAllFromConfig() {
  return Promise.all(Config$AgdaModeVscode.Connection.getAgdaPaths().map(fromRawPath));
}

async function getFirstUsable() {
  var targets = await getAllFromConfig();
  return Core__Array.reduce(targets, undefined, (function (acc, target) {
                if (acc !== undefined) {
                  return acc;
                } else if (target.TAG === "Ok") {
                  return target._0;
                } else {
                  return ;
                }
              }));
}

async function getPicked(state) {
  var fromMemento = State__Type$AgdaModeVscode.Memento.get(state.memento, "pickedConnection");
  if (fromMemento === undefined) {
    return await getFirstUsable();
  }
  var fromMemento$1 = Caml_option.valFromOption(fromMemento);
  var fromConfig = await getAllFromConfig();
  var stillExists = Core__Array.reduce(fromConfig, false, (function (acc, target) {
          if (acc) {
            return true;
          } else if (target.TAG === "Ok") {
            return Connection__URI$AgdaModeVscode.toString(toURI(target._0)) === fromMemento$1;
          } else {
            return false;
          }
        }));
  if (stillExists) {
    var target = await fromRawPath(fromMemento$1);
    if (target.TAG === "Ok") {
      return target._0;
    } else {
      return ;
    }
  }
  await State__Type$AgdaModeVscode.Memento.set(state.memento, "pickedConnection", undefined);
}

function setPicked(state, target) {
  if (target !== undefined) {
    return State__Type$AgdaModeVscode.Memento.set(state.memento, "pickedConnection", Connection__URI$AgdaModeVscode.toString(toURI(target)));
  } else {
    return State__Type$AgdaModeVscode.Memento.set(state.memento, "pickedConnection", undefined);
  }
}

var Module = {
  fromURI: fromURI,
  toURI: toURI,
  fromRawPath: fromRawPath,
  getAllFromConfig: getAllFromConfig,
  getPicked: getPicked,
  setPicked: setPicked
};

var Resolver;

var IPC;

var $$Error;

var URI;

exports.Resolver = Resolver;
exports.IPC = IPC;
exports.$$Error = $$Error;
exports.URI = URI;
exports.Module = Module;
exports.fromURI = fromURI;
exports.toURI = toURI;
exports.fromRawPath = fromRawPath;
exports.getAllFromConfig = getAllFromConfig;
exports.getPicked = getPicked;
exports.setPicked = setPicked;
/* node:fs Not a pure module */
