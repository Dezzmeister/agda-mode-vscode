// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodeos = require("node:os");
var Nodepath = require("node:path");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection__Resolver$AgdaModeVscode = require("./Connection__Resolver.bs.js");
var Connection__Resolver__GitHub$AgdaModeVscode = require("./Resolver/Connection__Resolver__GitHub.bs.js");

async function afterDownload(isCached, param) {
  var path = param[0];
  var assetPath = Nodepath.join(path, "data");
  var env = Object.fromEntries([[
          "Agda_datadir",
          assetPath
        ]]);
  var options_env = env;
  var options = {
    env: options_env
  };
  var execPath = Nodepath.join(path, "als");
  var shouldChmod = !isCached && Nodeos.platform() !== "win32";
  if (shouldChmod) {
    await Connection__Resolver__GitHub$AgdaModeVscode.chmodExecutable(execPath);
  }
  return {
          TAG: "Ok",
          _0: [
            execPath,
            [],
            options,
            param[1]
          ],
          [Symbol.for("name")]: "Ok"
        };
}

function makeAgdaLanguageServerRepo(globalStoragePath) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          globalStoragePath: globalStoragePath,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function probeLSP(globalStoragePath, onDownload) {
  var port = Config$AgdaModeVscode.Connection.getAgdaLanguageServerPort();
  return await Connection__Resolver$AgdaModeVscode.searchUntilSuccess([
              {
                TAG: "FromTCP",
                _0: port,
                _1: "localhost",
                [Symbol.for("name")]: "FromTCP"
              },
              {
                TAG: "FromCommand",
                _0: "als",
                [Symbol.for("name")]: "FromCommand"
              },
              {
                TAG: "FromGitHub",
                _0: makeAgdaLanguageServerRepo(globalStoragePath),
                _1: {
                  chooseFromReleases: (function (releases) {
                      var match = Nodeos.platform();
                      var platform;
                      switch (match) {
                        case "darwin" :
                            var match$1 = Nodeos.arch();
                            switch (match$1) {
                              case "arm64" :
                                  platform = "macos-arm64";
                                  break;
                              case "x64" :
                                  platform = "macos-x64";
                                  break;
                              default:
                                platform = undefined;
                            }
                            break;
                        case "linux" :
                            platform = "ubuntu";
                            break;
                        case "win32" :
                            platform = "windows";
                            break;
                        default:
                          platform = undefined;
                      }
                      var release = Connection__Resolver__GitHub$AgdaModeVscode.Release.chooseLatest(releases);
                      if (release === undefined) {
                        return ;
                      }
                      if (platform === undefined) {
                        return ;
                      }
                      var expectedAssetName = "als-" + platform + ".zip";
                      var asset = Connection__Resolver__GitHub$AgdaModeVscode.Asset.chooseByName(release.assets, expectedAssetName);
                      if (asset !== undefined) {
                        return {
                                release: release,
                                asset: asset,
                                saveAsFileName: release.tag_name + "-" + platform
                              };
                      }
                      
                    }),
                  onDownload: onDownload,
                  afterDownload: afterDownload,
                  log: (function (x) {
                      console.log(x);
                    })
                },
                [Symbol.for("name")]: "FromGitHub"
              }
            ]);
}

function probeEmacs() {
  var storedPath = Config$AgdaModeVscode.Connection.getAgdaPath();
  var storedName = Config$AgdaModeVscode.Connection.getAgdaVersion();
  return Connection__Resolver$AgdaModeVscode.searchUntilSuccess([
              {
                TAG: "FromFile",
                _0: storedPath,
                [Symbol.for("name")]: "FromFile"
              },
              {
                TAG: "FromCommand",
                _0: storedName,
                [Symbol.for("name")]: "FromCommand"
              }
            ]);
}

var Version;

exports.Version = Version;
exports.afterDownload = afterDownload;
exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.probeLSP = probeLSP;
exports.probeEmacs = probeEmacs;
/* node:os Not a pure module */
