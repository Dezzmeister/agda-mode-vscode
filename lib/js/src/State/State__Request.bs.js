// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodepath = require("node:path");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Connection__Target$AgdaModeVscode = require("../Connection/Connection__Target.bs.js");
var Connection__Download__Util$AgdaModeVscode = require("../Connection/Download/Connection__Download__Util.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../Connection/Download/Connection__Download__Platform.bs.js");

async function askUserAboutDownloadPolicy() {
  var result = await Vscode.window.showWarningMessage("Cannot find Agda or Agda Language Server", {
        modal: true,
        detail: "Do you want to download and install the latest Agda Language Server?"
      }, Config$AgdaModeVscode.Connection.DownloadPolicy.toString("Yes"), Config$AgdaModeVscode.Connection.DownloadPolicy.toString("No"));
  return Core__Option.mapOr(result, "No", Config$AgdaModeVscode.Connection.DownloadPolicy.fromString);
}

function alreadyDownloaded(state) {
  return async function () {
    var path = Nodepath.join(state.globalStorageUri.fsPath, "latest-als");
    var val;
    try {
      val = await Nodefs.promises.access(path);
    }
    catch (exn){
      return ;
    }
    var target = await Connection__Target$AgdaModeVscode.fromRawPath(path);
    if (target.TAG === "Ok") {
      return target._0;
    }
    
  };
}

function download(state) {
  return async function (platform) {
    var reportProgress = await Connection__Download__Util$AgdaModeVscode.Progress.report("Agda Language Server");
    return await Connection$AgdaModeVscode.downloadLatestALS(state.memento, state.globalStorageUri, platform, reportProgress);
  };
}

var LatestALS = {
  alreadyDownloaded: alreadyDownloaded,
  download: download
};

async function sendRequest(state, handleResponse, request) {
  var sendRequestAndHandleResponses = async function (connection, state, request, handler) {
    var onResponse = async function (response) {
      await handler(response);
      return Chan$AgdaModeVscode.emit(state.channels.log, {
                  TAG: "ResponseHandled",
                  _0: response,
                  [Symbol.for("name")]: "ResponseHandled"
                });
    };
    Chan$AgdaModeVscode.emit(state.channels.log, {
          TAG: "RequestSent",
          _0: request,
          [Symbol.for("name")]: "RequestSent"
        });
    var error = await Connection$AgdaModeVscode.sendRequest(connection, state.document, request, onResponse);
    if (error.TAG !== "Ok") {
      return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error._0);
    }
    var status = error._0;
    await State__View$AgdaModeVscode.Panel.displayConnectionStatus(state, status);
    if (status.TAG === "Agda") {
      state.agdaVersion = status._0;
    } else {
      state.agdaVersion = status._1;
    }
  };
  var connection = state.connection;
  if (connection !== undefined) {
    return await State$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                  return sendRequestAndHandleResponses(connection, state, request, handleResponse);
                }), request);
  }
  var platform = await Connection__Download__Platform$AgdaModeVscode.determine();
  var error = await Connection$AgdaModeVscode.make(state.memento, Config$AgdaModeVscode.Connection.getAgdaPaths(), [
        "als",
        "agda"
      ], platform, askUserAboutDownloadPolicy, alreadyDownloaded(state), download(state));
  if (error.TAG !== "Ok") {
    return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error._0);
  }
  var connection$1 = error._0;
  state.connection = connection$1;
  return await State$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                return sendRequestAndHandleResponses(connection$1, state, request, handleResponse);
              }), request);
}

async function sendRequestAndCollectResponses(state, request) {
  var responses = {
    contents: []
  };
  var responseHandler = async function (response) {
    responses.contents.push(response);
  };
  await sendRequest(state, responseHandler, request);
  return responses.contents;
}

exports.askUserAboutDownloadPolicy = askUserAboutDownloadPolicy;
exports.LatestALS = LatestALS;
exports.sendRequest = sendRequest;
exports.sendRequestAndCollectResponses = sendRequestAndCollectResponses;
/* vscode Not a pure module */
