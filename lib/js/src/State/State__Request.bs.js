// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var Connection__Download__Util$AgdaModeVscode = require("../Connection/Download/Connection__Download__Util.bs.js");

async function handleDownloadPolicy(state, dispatchCommand, errors, policy) {
  switch (policy) {
    case "YesKeepUpToDate" :
        await State__View$AgdaModeVscode.Panel.display(state, {
              TAG: "Plain",
              _0: "Trying to download and install the latest Agda Language Server and keep it up-to-date",
              [Symbol.for("name")]: "Plain"
            }, []);
        var reportProgress = await Connection__Download__Util$AgdaModeVscode.Progress.report("Agda Language Server");
        var error = await Connection$AgdaModeVscode.downloadLatestALS(state.memento, state.globalStorageUri, reportProgress);
        if (error.TAG === "Ok") {
          return await dispatchCommand("Load");
        } else {
          return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error._0);
        }
    case "YesButDontUpdate" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Trying to download and install the latest Agda Language Server",
                    [Symbol.for("name")]: "Plain"
                  }, []);
    case "NoDontAskAgain" :
        return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, {
                    TAG: "CommandsNotFound",
                    _0: errors,
                    [Symbol.for("name")]: "CommandsNotFound"
                  });
    case "Undecided" :
        var result = await Vscode.window.showWarningMessage("Cannot find Agda or Agda Language Server", {
              modal: true,
              detail: "Do you want to download and install the latest Agda Language Server?"
            }, "Yes, and keep it up-to-date", "Yes, but don't update afterwards", "No, and don't ask again");
        var newPolicy;
        if (result !== undefined) {
          switch (result) {
            case "No, and don't ask again" :
                newPolicy = "NoDontAskAgain";
                break;
            case "Yes, and keep it up-to-date" :
                newPolicy = "YesKeepUpToDate";
                break;
            case "Yes, but don't update afterwards" :
                newPolicy = "YesButDontUpdate";
                break;
            default:
              newPolicy = "Undecided";
          }
        } else {
          newPolicy = "Undecided";
        }
        return await Config$AgdaModeVscode.Connection.Download.setDownloadPolicy(newPolicy);
    
  }
}

async function onCommandsNotFoundError(state, dispatchCommand, errors) {
  var policy = Config$AgdaModeVscode.Connection.Download.getDownloadPolicy();
  return await handleDownloadPolicy(state, dispatchCommand, errors, policy);
}

async function connectionErrorHandler(state, dispatchCommand, error) {
  if (typeof error !== "object") {
    return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error);
  } else if (error.TAG === "CommandsNotFound") {
    return await onCommandsNotFoundError(state, dispatchCommand, error._0);
  } else {
    return await State__View$AgdaModeVscode.Panel.displayConnectionError(state, error);
  }
}

async function sendRequest(state, dispatchCommand, handleResponse, request) {
  var sendRequestAndHandleResponses = async function (connection, state, request, handler) {
    var onResponse = async function (response) {
      await handler(response);
      return Chan$AgdaModeVscode.emit(state.channels.log, {
                  TAG: "ResponseHandled",
                  _0: response,
                  [Symbol.for("name")]: "ResponseHandled"
                });
    };
    Chan$AgdaModeVscode.emit(state.channels.log, {
          TAG: "RequestSent",
          _0: request,
          [Symbol.for("name")]: "RequestSent"
        });
    var error = await Connection$AgdaModeVscode.sendRequest(connection, state.document, request, onResponse);
    if (error.TAG === "Ok") {
      var status = error._0;
      await State__View$AgdaModeVscode.Panel.displayConnectionStatus(state, status);
      if (status.TAG === "Agda") {
        state.agdaVersion = status._0;
      } else {
        state.agdaVersion = status._1;
      }
      return ;
    }
    var error$1 = error._0;
    var match = Connection__Error$AgdaModeVscode.toString(error$1);
    console.log("Error from sendRequestAndHandleResponses: " + match[0] + " : " + match[1]);
    return await connectionErrorHandler(state, dispatchCommand, error$1);
  };
  var connection = state.connection;
  if (connection !== undefined) {
    return await State$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                  return sendRequestAndHandleResponses(connection, state, request, handleResponse);
                }), request);
  }
  var error = await Connection$AgdaModeVscode.make(state.memento, Config$AgdaModeVscode.Connection.getAgdaPaths(), [
        "als",
        "agda"
      ]);
  if (error.TAG !== "Ok") {
    return await connectionErrorHandler(state, dispatchCommand, error._0);
  }
  var connection$1 = error._0;
  state.connection = connection$1;
  return await State$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                return sendRequestAndHandleResponses(connection$1, state, request, handleResponse);
              }), request);
}

async function sendRequestAndCollectResponses(state, dispatchCommand, request) {
  var responses = {
    contents: []
  };
  var responseHandler = async function (response) {
    responses.contents.push(response);
  };
  await sendRequest(state, dispatchCommand, responseHandler, request);
  return responses.contents;
}

exports.handleDownloadPolicy = handleDownloadPolicy;
exports.onCommandsNotFoundError = onCommandsNotFoundError;
exports.connectionErrorHandler = connectionErrorHandler;
exports.sendRequest = sendRequest;
exports.sendRequestAndCollectResponses = sendRequestAndCollectResponses;
/* vscode Not a pure module */
