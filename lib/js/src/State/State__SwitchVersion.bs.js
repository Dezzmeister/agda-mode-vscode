// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__Type$AgdaModeVscode = require("./State__Type.bs.js");
var Connection__Target$AgdaModeVscode = require("../Connection/Connection__Target.bs.js");

async function openGlobalStorageFolder(state) {
  await Vscode.env.openExternal(state.globalStorageUri);
}

function make(state) {
  return {
          state: state,
          quickPick: Vscode.window.createQuickPick(),
          items: [],
          subscriptions: []
        };
}

function render(self) {
  var pickedConnection = State__Type$AgdaModeVscode.Memento.get(self.state.memento, "pickedConnection");
  var selectedItems = self.items.filter(function (item) {
        return item.detail === pickedConnection;
      });
  self.quickPick.items = self.items;
  self.quickPick.selectedItems = selectedItems;
  self.quickPick.show();
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QP = {
  make: make,
  render: render,
  destroy: destroy
};

async function handleSelection(self, selection) {
  var match = selection.label;
  if (match === "Open download folder") {
    return await openGlobalStorageFolder(self.state);
  }
  var path = selection.detail;
  var match$1 = await Connection$AgdaModeVscode.getPickedTarget(self.state);
  if (match$1 === undefined) {
    return ;
  }
  if (match$1.TAG !== "Ok") {
    return ;
  }
  var target = match$1._0;
  var selectionChanged = path !== Connection__Target$AgdaModeVscode.getPath(target);
  if (selectionChanged) {
    console.log("changed selection to " + Core__Option.getOr(path, "None"));
    await Connection$AgdaModeVscode.setPickedTarget(self.state, target);
    return destroy(self);
  }
  
}

async function run(state) {
  var qp = make(state);
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidChangeSelection(function (items) {
            Core__Option.forEach(items[0], (function (item) {
                    handleSelection(qp, item);
                  }));
          }), qp.subscriptions);
  qp.quickPick.placeholder = "Switch Agda Version";
  var otherItems = [
    {
      kind: -1,
      label: ""
    },
    {
      description: "Where the language servers are downloaded",
      label: "Open download folder"
    }
  ];
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidHide(function () {
            destroy(qp);
          }), qp.subscriptions);
  qp.items = [otherItems].flat();
  render(qp);
  var installationItemsSeperator = [{
      kind: -1,
      label: "Installations"
    }];
  var installationItems = Connection__Target$AgdaModeVscode.getRawPathsFromConfig().map(function (path) {
        return {
                label: path
              };
      });
  qp.items = [
      installationItemsSeperator,
      installationItems,
      otherItems
    ].flat();
  render(qp);
  var installationTargets = await Connection$AgdaModeVscode.getTargets();
  var installationItems$1 = installationTargets.map(function (result) {
        if (result.TAG === "Ok") {
          var match = result._0;
          if (match.TAG === "Agda") {
            return {
                    detail: match._1,
                    iconPath: {
                      dark: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/dark.png"),
                      light: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/light.png")
                    },
                    label: "Agda v" + match._0
                  };
          }
          var path = match._2;
          if (path.TAG !== "Ok") {
            return {
                    description: "Agda v" + match._1,
                    detail: path._0,
                    label: "$(squirrel)  Language Server v" + match._0
                  };
          }
          
        } else {
          var path$1 = result._0;
          if (path$1.TAG === "CannotResolvePath") {
            return {
                    description: "unable to resolve the given path",
                    detail: path$1._0,
                    label: "$(error)  Error"
                  };
          }
          
        }
        console.log(result);
        return {
                description: "???",
                label: "Unknown"
              };
      });
  var items = [
      installationItemsSeperator,
      installationItems$1,
      otherItems
    ].flat();
  qp.items = items;
  return render(qp);
}

exports.openGlobalStorageFolder = openGlobalStorageFolder;
exports.QP = QP;
exports.handleSelection = handleSelection;
exports.run = run;
/* vscode Not a pure module */
