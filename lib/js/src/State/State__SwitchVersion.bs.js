// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Connection__Target$AgdaModeVscode = require("../Connection/Connection__Target.bs.js");

async function openGlobalStorageFolder(state) {
  await Vscode.env.openExternal(state.globalStorageUri);
}

function make(state) {
  return {
          state: state,
          quickPick: Vscode.window.createQuickPick(),
          items: [],
          subscriptions: []
        };
}

function render(self) {
  self.quickPick.items = self.items;
  self.quickPick.show();
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QP = {
  make: make,
  render: render,
  destroy: destroy
};

async function handleSelection(self, selection) {
  var match = selection.label;
  if (match === "Open download folder") {
    console.log("Open download folder");
    return ;
  }
  var path = selection.detail;
  var target = await Connection__Target$AgdaModeVscode.getPicked(self.state);
  if (target !== undefined) {
    console.log("Target picked before", selection.detail, target);
    var selectionChanged = path !== Connection__Target$AgdaModeVscode.getPath(target);
    if (!selectionChanged) {
      return ;
    }
    if (path === undefined) {
      return ;
    }
    var newTarget = await Connection__Target$AgdaModeVscode.probePath(path);
    if (newTarget.TAG === "Ok") {
      return await Connection__Target$AgdaModeVscode.setPicked(self.state, newTarget._0);
    } else {
      return ;
    }
  }
  console.log("No target picked before");
}

async function run(state) {
  var qp = make(state);
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidChangeSelection(function (selectedItems) {
            console.log("onDidChangeSelection", selectedItems);
            Core__Option.forEach(selectedItems[0], (function (item) {
                    handleSelection(qp, item);
                  }));
          }), qp.subscriptions);
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidHide(function () {
            destroy(qp);
          }), qp.subscriptions);
  qp.quickPick.placeholder = "Switch Agda Version";
  var miscItems = [
    {
      kind: -1,
      label: ""
    },
    {
      description: "Where the language servers are downloaded",
      label: "Open download folder"
    }
  ];
  var targetToItem = function (target) {
    if (target.TAG === "Ok") {
      var match = target._0;
      if (match.TAG === "Agda") {
        return {
                detail: match._1,
                iconPath: {
                  dark: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/dark.png"),
                  light: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/light.png")
                },
                label: "Agda v" + match._0
              };
      }
      var path = match._2;
      if (path.TAG !== "Ok") {
        return {
                description: "Agda v" + match._1,
                detail: path._0,
                label: "$(squirrel)  Language Server v" + match._0
              };
      }
      
    } else {
      var path$1 = target._0;
      if (typeof path$1 === "object" && path$1.TAG === "CannotResolvePath") {
        return {
                description: "unable to resolve the given path",
                detail: path$1._0,
                label: "$(error)  Error"
              };
      }
      
    }
    console.log(target);
    return {
            description: "???",
            label: "Unknown"
          };
  };
  var installationTargets = await Connection__Target$AgdaModeVscode.getAll();
  var picked = await Connection__Target$AgdaModeVscode.getPicked(state);
  var isPicked = function (target) {
    if (picked !== undefined && target.TAG === "Ok") {
      return Connection__Target$AgdaModeVscode.getPath(picked) === Connection__Target$AgdaModeVscode.getPath(target._0);
    } else {
      return false;
    }
  };
  var selectedItemsSeperator = [{
      kind: -1,
      label: "Selected"
    }];
  var selectedItems = installationTargets.filter(isPicked).map(targetToItem);
  var otherInstallationItemsSeperator = [{
      kind: -1,
      label: "Others"
    }];
  var installationItems = installationTargets.filter(function (x) {
          return !isPicked(x);
        }).map(targetToItem);
  var items = [
      selectedItemsSeperator,
      selectedItems,
      otherInstallationItemsSeperator,
      installationItems,
      miscItems
    ].flat();
  qp.items = items;
  return render(qp);
}

exports.openGlobalStorageFolder = openGlobalStorageFolder;
exports.QP = QP;
exports.handleSelection = handleSelection;
exports.run = run;
/* vscode Not a pure module */
