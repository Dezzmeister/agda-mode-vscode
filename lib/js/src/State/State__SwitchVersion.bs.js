// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var Connection__Resolver$AgdaModeVscode = require("../Connection/Connection__Resolver.bs.js");

async function openGlobalStorageFolder(state) {
  await Vscode.env.openExternal(state.globalStorageUri);
}

async function switchAgdaVersion(state, newAgdaVersion) {
  var existingAgdaVersion = Config$AgdaModeVscode.Connection.getAgdaVersion();
  var existingAgdaPath = Config$AgdaModeVscode.Connection.getAgdaPath();
  await Config$AgdaModeVscode.Connection.setAgdaPath("");
  await Config$AgdaModeVscode.Connection.setAgdaVersion(newAgdaVersion);
  await State__View$AgdaModeVscode.Panel.display(state, {
        TAG: "Plain",
        _0: "Switching to '" + newAgdaVersion + "'",
        [Symbol.for("name")]: "Plain"
      }, []);
  await Connection$AgdaModeVscode.stop();
  var error = await Connection$AgdaModeVscode.start(state.globalStorageUri, false, (function (extra) {
          return State$AgdaModeVscode.onDownload(state, extra);
        }));
  if (error.TAG === "Ok") {
    var match = error._0;
    if (match.TAG !== "Agda") {
      return await State__View$AgdaModeVscode.Panel.display(state, {
                  TAG: "Success",
                  _0: "Panic, Switched to ALS '" + match._0 + "'",
                  [Symbol.for("name")]: "Success"
                }, [Item$AgdaModeVscode.plainText("Should have switched to an Agda executable, please file an issue")]);
    }
    var version = match._0;
    await State__View$AgdaModeVscode.Panel.displayStatus(state, "Agda v" + version);
    await State__View$AgdaModeVscode.Panel.display(state, {
          TAG: "Success",
          _0: "Switched to version '" + version + "'",
          [Symbol.for("name")]: "Success"
        }, [Item$AgdaModeVscode.plainText("Found '" + newAgdaVersion + "' at: " + match._1)]);
    state.agdaVersion = version;
    return ;
  }
  var match$1 = Connection__Error$AgdaModeVscode.toString(error._0);
  var header = {
    TAG: "Error",
    _0: "Cannot switch Agda version '" + newAgdaVersion + "' : " + match$1[0],
    [Symbol.for("name")]: "Error"
  };
  var body = [Item$AgdaModeVscode.plainText(match$1[1] + "\n\nSwitching back to " + existingAgdaPath)];
  await Config$AgdaModeVscode.Connection.setAgdaPath(existingAgdaPath);
  await Config$AgdaModeVscode.Connection.setAgdaVersion(existingAgdaVersion);
  return await State__View$AgdaModeVscode.Panel.display(state, header, body);
}

async function showInputBoxForSwitchingAgdaVersion(state) {
  var existingAgdaVersion = Config$AgdaModeVscode.Connection.getAgdaVersion();
  var result = await Vscode.window.showInputBox({
        placeHolder: "For example: agda-2.7.0.1",
        value: existingAgdaVersion,
        validateInput: (function (name) {
            var name$1 = name.trim();
            var promise = Connection__Resolver$AgdaModeVscode.search({
                    TAG: "FromCommand",
                    _0: name$1,
                    [Symbol.for("name")]: "FromCommand"
                  }, undefined).then(function (result) {
                  if (result.TAG === "Ok") {
                    var result$1 = result._0;
                    var $$location;
                    $$location = result$1.TAG === "ViaPipe" ? "at " + result$1._0 : "at " + result$1._1 + ":" + String(result$1._0);
                    var msg_message = "Found '" + name$1 + "' at: " + $$location;
                    var msg = {
                      message: msg_message,
                      severity: 1
                    };
                    return Caml_option.some(VSCode.StringOr.make({
                                    TAG: "Others",
                                    _0: msg,
                                    [Symbol.for("name")]: "Others"
                                  }));
                  }
                  var msg$1 = Connection__Resolver$AgdaModeVscode.$$Error.toString(result._0);
                  return Caml_option.some(VSCode.StringOr.make({
                                  TAG: "String",
                                  _0: "Cannot switch Agda version '" + name$1 + "' : " + msg$1,
                                  [Symbol.for("name")]: "String"
                                }));
                });
            return VSCode.PromiseOr.make({
                        TAG: "Promise",
                        _0: promise,
                        [Symbol.for("name")]: "Promise"
                      });
          })
      });
  if (result === undefined) {
    return ;
  }
  var newAgdaVersion = result.trim();
  return await switchAgdaVersion(state, newAgdaVersion);
}

async function handleSelection(state, selection) {
  var match = selection.label;
  switch (match) {
    case "Change Agda command name" :
        return await showInputBoxForSwitchingAgdaVersion(state);
    case "Open download folder" :
        return await openGlobalStorageFolder(state);
    default:
      console.log("Unknown selection");
      return ;
  }
}

async function run(state) {
  var quickPick = Vscode.window.createQuickPick();
  var subscriptions = [];
  quickPick.placeholder = "Switch Agda Version";
  var otherItems = [
    {
      kind: -1,
      label: "Other operations"
    },
    {
      description: "Execute Agda with given command name",
      label: "Change Agda command name"
    },
    {
      description: "Where the language servers are downloaded",
      label: "Open download folder"
    }
  ];
  Util$AgdaModeVscode.Disposable.add(quickPick.onDidChangeSelection(function (items) {
            items.forEach(function (item) {
                  handleSelection(state, item);
                });
          }), subscriptions);
  Util$AgdaModeVscode.Disposable.add(quickPick.onDidHide(function () {
            quickPick.dispose();
            subscriptions.forEach(function (sub) {
                  sub.dispose();
                });
          }), subscriptions);
  var items = [otherItems].flat();
  quickPick.items = items;
  quickPick.show();
}

exports.openGlobalStorageFolder = openGlobalStorageFolder;
exports.switchAgdaVersion = switchAgdaVersion;
exports.showInputBoxForSwitchingAgdaVersion = showInputBoxForSwitchingAgdaVersion;
exports.handleSelection = handleSelection;
exports.run = run;
/* vscode Not a pure module */
