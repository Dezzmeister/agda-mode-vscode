// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodeos = require("node:os");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Core__Date = require("@rescript/core/lib/js/src/Core__Date.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var Connection__Target$AgdaModeVscode = require("../Connection/Connection__Target.bs.js");
var Connection__Validation$AgdaModeVscode = require("../Connection/Connection__Validation.bs.js");

async function openGlobalStorageFolder(state) {
  await Vscode.env.openExternal(state.globalStorageUri);
}

async function switchAgdaVersion(state) {
  var match = await Connection__Target$AgdaModeVscode.getPicked(state);
  if (match !== undefined) {
    if (match.TAG === "Agda") {
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "");
      await State__View$AgdaModeVscode.Panel.display(state, {
            TAG: "Plain",
            _0: "Switching to Agda v" + match._0,
            [Symbol.for("name")]: "Plain"
          }, []);
    } else {
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "");
      await State__View$AgdaModeVscode.Panel.display(state, {
            TAG: "Plain",
            _0: "Switching to Agda v" + match._1 + " Language Server v" + match._0,
            [Symbol.for("name")]: "Plain"
          }, []);
    }
  }
  await Connection$AgdaModeVscode.stop();
  var error = await Connection$AgdaModeVscode.start(state);
  if (error.TAG === "Ok") {
    var match$1 = await Connection__Target$AgdaModeVscode.getPicked(state);
    if (match$1 === undefined) {
      return ;
    }
    if (match$1.TAG === "Agda") {
      var version = match$1._0;
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "Agda v" + version);
      return await State__View$AgdaModeVscode.Panel.display(state, {
                  TAG: "Success",
                  _0: "Switched to Agda v" + version,
                  [Symbol.for("name")]: "Success"
                }, []);
    }
    var agdaVersion = match$1._1;
    var alsVersion = match$1._0;
    await State__View$AgdaModeVscode.Panel.displayStatus(state, "Agda v" + agdaVersion + " Language Server v" + alsVersion);
    return await State__View$AgdaModeVscode.Panel.display(state, {
                TAG: "Success",
                _0: "Switched to Agda v" + agdaVersion + " Language Server v" + alsVersion,
                [Symbol.for("name")]: "Success"
              }, []);
  }
  var match$2 = Connection__Error$AgdaModeVscode.toString(error._0);
  var header = {
    TAG: "Error",
    _0: "Failed to switch to a different installation: " + match$2[0],
    [Symbol.for("name")]: "Error"
  };
  var body = [Item$AgdaModeVscode.plainText(match$2[1])];
  return await State__View$AgdaModeVscode.Panel.display(state, header, body);
}

function make(state) {
  return {
          state: state,
          quickPick: Vscode.window.createQuickPick(),
          items: [],
          subscriptions: []
        };
}

function render(self) {
  self.quickPick.items = self.items;
  self.quickPick.show();
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QP = {
  make: make,
  render: render,
  destroy: destroy
};

async function handleSelection(self, selection) {
  var match = selection.label;
  if (match === "Open download folder") {
    destroy(self);
    return await openGlobalStorageFolder(self.state);
  }
  var path = selection.detail;
  var target = await Connection__Target$AgdaModeVscode.getPicked(self.state);
  if (target === undefined) {
    return destroy(self);
  }
  destroy(self);
  var selectionChanged = path !== Connection__Target$AgdaModeVscode.getPath(target);
  if (!selectionChanged) {
    return ;
  }
  if (path === undefined) {
    return ;
  }
  var newTarget = await Connection__Target$AgdaModeVscode.probePath(path);
  if (newTarget.TAG !== "Ok") {
    return ;
  }
  await Connection__Target$AgdaModeVscode.setPicked(self.state, newTarget._0);
  return await switchAgdaVersion(self.state);
}

async function run(state) {
  var qp = make(state);
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidChangeSelection(function (selectedItems) {
            Core__Option.forEach(selectedItems[0], (function (item) {
                    handleSelection(qp, item);
                  }));
          }), qp.subscriptions);
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidHide(function () {
            destroy(qp);
          }), qp.subscriptions);
  qp.quickPick.placeholder = "Switch Agda Version";
  var miscItems = [
    {
      kind: -1,
      label: ""
    },
    {
      description: "Where the language servers are downloaded",
      label: "Open download folder"
    }
  ];
  var targetToItem = function (target) {
    if (target.TAG === "Ok") {
      var match = target._0;
      if (match.TAG === "Agda") {
        return {
                detail: match._1,
                iconPath: {
                  dark: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/dark.png"),
                  light: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/light.png")
                },
                label: "Agda v" + match._0
              };
      }
      var method = match._2;
      var tmp;
      if (method.TAG === "Ok") {
        var match$1 = method._0;
        tmp = match$1.TAG === "ViaPipe" ? match$1._0 : match$1._1 + ":" + String(match$1._0);
      } else {
        tmp = method._0;
      }
      return {
              description: "Agda v" + match._1,
              detail: tmp,
              label: "$(squirrel)  Language Server v" + match._0
            };
    }
    var path = target._0;
    switch (path.TAG) {
      case "CannotResolvePath" :
          return {
                  description: "unable to resolve the given path",
                  detail: path._0,
                  label: "$(question)  Error"
                };
      case "ValidationError" :
          return {
                  description: Connection__Validation$AgdaModeVscode.$$Error.toString(path._1),
                  detail: path._0,
                  label: "$(error)  Error"
                };
      default:
        var match$2 = Connection__Error$AgdaModeVscode.toString(path);
        return {
                description: match$2[0],
                detail: match$2[1],
                label: "$(error)  Error"
              };
    }
  };
  var installationTargets = await Connection__Target$AgdaModeVscode.getAll();
  var picked = await Connection__Target$AgdaModeVscode.getPicked(state);
  var isPicked = function (target) {
    if (picked !== undefined && target.TAG === "Ok") {
      return Connection__Target$AgdaModeVscode.getPath(picked) === Connection__Target$AgdaModeVscode.getPath(target._0);
    } else {
      return false;
    }
  };
  var selectedItemsSeperator = [{
      kind: -1,
      label: "Selected"
    }];
  var selectedItems = installationTargets.filter(isPicked).map(targetToItem);
  var otherInstallationItemsSeperator = [{
      kind: -1,
      label: "Others"
    }];
  var installationItems = installationTargets.filter(function (x) {
          return !isPicked(x);
        }).map(targetToItem);
  var chooseFromRelease = function (release) {
    var match = Nodeos.platform();
    var platform;
    switch (match) {
      case "darwin" :
          var match$1 = Nodeos.arch();
          switch (match$1) {
            case "arm64" :
                platform = "macos-arm64";
                break;
            case "x64" :
                platform = "macos-x64";
                break;
            default:
              platform = undefined;
          }
          break;
      case "linux" :
          platform = "ubuntu";
          break;
      case "win32" :
          platform = "windows";
          break;
      default:
        platform = undefined;
    }
    if (platform !== undefined) {
      return release.assets.filter(function (asset) {
                  return asset.name.endsWith(platform + ".zip");
                });
    } else {
      return [];
    }
  };
  var items = [
      selectedItemsSeperator,
      selectedItems,
      otherInstallationItemsSeperator,
      installationItems,
      miscItems
    ].flat();
  qp.items = items;
  render(qp);
  var alsPrebuiltItemsSeparator = [{
      kind: -1,
      label: "Prebuilt ALS"
    }];
  var error = await Connection$AgdaModeVscode.getALSReleaseManifest(state);
  var alsPrebuiltItems;
  if (error.TAG === "Ok") {
    var laterReleases = error._0.filter(function (release) {
          return Caml_obj.greaterequal(new Date(release.published_at), new Date("2024-12-18"));
        });
    var latestRelease = laterReleases.toSorted(function (a, b) {
            return Core__Date.compare(new Date(b.published_at), new Date(a.published_at));
          })[0];
    if (latestRelease !== undefined) {
      var parts = latestRelease.tag_name.split(".");
      var alsVersion = Core__Option.getOr(parts[parts.length - 1 | 0], "?");
      var assets = chooseFromRelease(latestRelease);
      alsPrebuiltItems = assets.map(function (asset) {
            var agdaVersion = asset.name.replace(/als-Agda-/, "").replace(/-.*/, "");
            return {
                    description: "Agda v" + agdaVersion,
                    detail: asset.browser_download_url,
                    label: "$(squirrel)  Language Server v" + alsVersion
                  };
          });
    } else {
      alsPrebuiltItems = [];
    }
  } else {
    var match = Connection__Error$AgdaModeVscode.toString(error._0);
    alsPrebuiltItems = [{
        description: match[0],
        detail: match[1],
        label: "$(debug-disconnect)  Error"
      }];
  }
  var items$1 = [
      selectedItemsSeperator,
      selectedItems,
      otherInstallationItemsSeperator,
      installationItems,
      alsPrebuiltItemsSeparator,
      alsPrebuiltItems,
      miscItems
    ].flat();
  qp.items = items$1;
  return render(qp);
}

exports.openGlobalStorageFolder = openGlobalStorageFolder;
exports.switchAgdaVersion = switchAgdaVersion;
exports.QP = QP;
exports.handleSelection = handleSelection;
exports.run = run;
/* vscode Not a pure module */
