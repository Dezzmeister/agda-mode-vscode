// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Nodepath = require("node:path");
var Core__Date = require("@rescript/core/lib/js/src/Core__Date.bs.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Connection__URI$AgdaModeVscode = require("../Connection/Connection__URI.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var Connection__Target$AgdaModeVscode = require("../Connection/Connection__Target.bs.js");
var Connection__Validation$AgdaModeVscode = require("../Connection/Connection__Validation.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("../Connection/Download/Connection__Download__GitHub.bs.js");

async function openGlobalStorageFolder(state) {
  await Vscode.env.openExternal(state.globalStorageUri);
}

async function switchAgdaVersion(state) {
  var match = await Connection__Target$AgdaModeVscode.getPicked(state);
  if (match !== undefined) {
    if (match.TAG === "Agda") {
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "");
      await State__View$AgdaModeVscode.Panel.display(state, {
            TAG: "Plain",
            _0: "Switching to Agda v" + match._0,
            [Symbol.for("name")]: "Plain"
          }, []);
    } else {
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "");
      await State__View$AgdaModeVscode.Panel.display(state, {
            TAG: "Plain",
            _0: "Switching to Agda v" + match._1 + " Language Server v" + match._0,
            [Symbol.for("name")]: "Plain"
          }, []);
    }
  }
  await Connection$AgdaModeVscode.stop();
  var error = await Connection$AgdaModeVscode.start(state);
  if (error.TAG === "Ok") {
    var match$1 = await Connection__Target$AgdaModeVscode.getPicked(state);
    if (match$1 === undefined) {
      return ;
    }
    if (match$1.TAG === "Agda") {
      var version = match$1._0;
      await State__View$AgdaModeVscode.Panel.displayStatus(state, "Agda v" + version);
      return await State__View$AgdaModeVscode.Panel.display(state, {
                  TAG: "Success",
                  _0: "Switched to Agda v" + version,
                  [Symbol.for("name")]: "Success"
                }, []);
    }
    var agdaVersion = match$1._1;
    var alsVersion = match$1._0;
    await State__View$AgdaModeVscode.Panel.displayStatus(state, "Agda v" + agdaVersion + " Language Server v" + alsVersion);
    return await State__View$AgdaModeVscode.Panel.display(state, {
                TAG: "Success",
                _0: "Switched to Agda v" + agdaVersion + " Language Server v" + alsVersion,
                [Symbol.for("name")]: "Success"
              }, []);
  }
  var match$2 = Connection__Error$AgdaModeVscode.toString(error._0);
  var header = {
    TAG: "Error",
    _0: "Failed to switch to a different installation: " + match$2[0],
    [Symbol.for("name")]: "Error"
  };
  var body = [Item$AgdaModeVscode.plainText(match$2[1])];
  return await State__View$AgdaModeVscode.Panel.display(state, header, body);
}

async function alreadyDownloaded(globalStoragePath) {
  var path = Nodepath.join(globalStoragePath, "latest-als");
  try {
    await Nodefs.promises.access(path);
    return true;
  }
  catch (exn){
    return false;
  }
}

async function download(memento, globalStoragePath, target) {
  var onDownload = function (param) {
    
  };
  var e = await Connection__Download__GitHub$AgdaModeVscode.download(target, memento, globalStoragePath, onDownload);
  if (e.TAG === "Ok") {
    console.log("isCached: " + PervasivesU.string_of_bool(e._0));
    var destPath = Nodepath.join(globalStoragePath, target.saveAsFileName, "als");
    console.log("Downloaded to: " + destPath);
    Config$AgdaModeVscode.Connection.addAgdaPath(destPath);
    return ;
  }
  console.log("Failed to download: " + Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(e._0));
}

var LatestALS = {
  alreadyDownloaded: alreadyDownloaded,
  download: download
};

function make(state, run) {
  return {
          state: state,
          rerender: (function () {
              return run(state);
            }),
          quickPick: Vscode.window.createQuickPick(),
          items: [],
          subscriptions: []
        };
}

function render(self) {
  self.quickPick.items = self.items;
  self.quickPick.show();
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QP = {
  make: make,
  render: render,
  destroy: destroy
};

async function handleSelection(self, memento, latestALS, globalStoragePath, selection) {
  var match = selection.label;
  switch (match) {
    case "$(cloud-download)  Download the latest Agda Language Server" :
        if (latestALS !== undefined) {
          await download(memento, globalStoragePath, latestALS);
          return await self.rerender();
        } else {
          return ;
        }
    case "$(folder-opened)  Open download folder" :
        destroy(self);
        return await openGlobalStorageFolder(self.state);
    case "$(sync)  Check for updates" :
        var repo = Connection$AgdaModeVscode.makeAgdaLanguageServerRepo(memento, globalStoragePath);
        await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.fetchFromGitHubAndCache(repo);
        return await self.rerender();
    default:
      var original = await Connection__Target$AgdaModeVscode.getPicked(self.state);
      if (original !== undefined) {
        var rawPath = selection.detail;
        if (rawPath === undefined) {
          return ;
        }
        var selectionChanged = rawPath !== Connection__URI$AgdaModeVscode.toString(Connection__Target$AgdaModeVscode.toURI(original));
        if (!selectionChanged) {
          return ;
        }
        var url = await Connection__URI$AgdaModeVscode.parse(rawPath);
        if (url.TAG === "Filepath") {
          var e = await Connection__Target$AgdaModeVscode.fromRawPath(url._0);
          if (e.TAG === "Ok") {
            await Connection__Target$AgdaModeVscode.setPicked(self.state, e._0);
            await switchAgdaVersion(self.state);
            return await self.rerender();
          }
          console.log(e._0);
          return ;
        }
        console.log("Trying to connect with: " + url._0.toString());
        return ;
      }
      console.log("no targets available");
      return await self.rerender();
  }
}

async function run(state) {
  var qp = make(state, run);
  qp.quickPick.placeholder = "Switch Agda Version";
  var latestALSAlreadyDownloaded = await alreadyDownloaded(state.globalStorageUri.fsPath);
  var tmp;
  if (latestALSAlreadyDownloaded) {
    var ageInSecs = Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.cacheAgeInSecs(state.memento);
    var hours = ageInSecs / 3600 | 0;
    var description;
    if (hours !== 0) {
      description = hours !== 1 ? (
          hours >= 24 ? "last checked: more than a day ago" : "last checked: " + String(hours) + " hours ago"
        ) : "last checked: 1 hour ago";
    } else {
      var minutes = ageInSecs / 60 | 0;
      description = minutes !== 0 ? (
          minutes !== 1 ? "last checked: " + String(minutes) + " minutes ago" : "last checked: 1 minute ago"
        ) : "last checked: less than a minute ago";
    }
    tmp = {
      description: description,
      label: "$(sync)  Check for updates"
    };
  } else {
    tmp = {
      description: "automatically kept up-to-date",
      label: "$(cloud-download)  Download the latest Agda Language Server"
    };
  }
  var miscItems = [
    {
      kind: -1,
      label: "Download"
    },
    tmp,
    {
      description: "Where the language servers are downloaded to",
      label: "$(folder-opened)  Open download folder"
    }
  ];
  var picked = await Connection__Target$AgdaModeVscode.getPicked(state);
  var isPicked = function (target) {
    if (picked !== undefined && target.TAG === "Ok") {
      return Caml_obj.equal(Connection__Target$AgdaModeVscode.toURI(picked), Connection__Target$AgdaModeVscode.toURI(target._0));
    } else {
      return false;
    }
  };
  var targetToItem = function (target) {
    if (target.TAG === "Ok") {
      var match = target._0;
      if (match.TAG === "Agda") {
        return {
                description: isPicked(target) ? "Selected" : "",
                detail: match._1,
                iconPath: {
                  dark: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/dark.png"),
                  light: Vscode.Uri.joinPath(Vscode.Uri.file(state.extensionPath), "asset/light.png")
                },
                label: "Agda v" + match._0
              };
      }
      var method = match._2;
      var tmp;
      if (method.TAG === "Ok") {
        var match$1 = method._0;
        tmp = match$1.TAG === "ViaPipe" ? match$1._0 : match$1._0.toString();
      } else {
        tmp = method._0;
      }
      return {
              description: isPicked(target) ? "Selected" : "",
              detail: tmp,
              label: "$(squirrel)  Agda v" + match._1 + " Language Server v" + match._0
            };
    }
    var url = target._0;
    switch (url.TAG) {
      case "CannotHandleURLsATM" :
          return {
                  description: "cannot handle URLs at the moment",
                  detail: url._0,
                  label: "$(question)  Error"
                };
      case "ValidationError" :
          return {
                  description: Connection__Validation$AgdaModeVscode.$$Error.toString(url._1),
                  detail: url._0,
                  label: "$(error)  Error"
                };
      default:
        var match$2 = Connection__Error$AgdaModeVscode.toString(url);
        return {
                description: match$2[0],
                detail: match$2[1],
                label: "$(error)  Error"
              };
    }
  };
  var installationsSeperator = [{
      kind: -1,
      label: "Installations"
    }];
  var installationTargets = await Connection__Target$AgdaModeVscode.getAllFromConfig();
  var installationsItems = installationTargets.map(targetToItem);
  var items = [
      installationsSeperator,
      installationsItems,
      miscItems
    ].flat();
  qp.items = items;
  render(qp);
  var chooseAssetFromRelease = function (release) {
    var match = Nodeos.platform();
    var platform;
    switch (match) {
      case "darwin" :
          var match$1 = Nodeos.arch();
          switch (match$1) {
            case "arm64" :
                platform = "macos-arm64";
                break;
            case "x64" :
                platform = "macos-x64";
                break;
            default:
              platform = undefined;
          }
          break;
      case "linux" :
          platform = "ubuntu";
          break;
      case "win32" :
          platform = "windows";
          break;
      default:
        platform = undefined;
    }
    if (platform !== undefined) {
      return release.assets.filter(function (asset) {
                  return asset.name.endsWith(platform + ".zip");
                });
    } else {
      return [];
    }
  };
  var _error = await Connection$AgdaModeVscode.getALSReleaseManifest(state);
  var latestALS;
  if (_error.TAG === "Ok") {
    var laterReleases = _error._0.filter(function (release) {
          return Caml_obj.greaterequal(new Date(release.published_at), new Date("2024-12-18"));
        });
    var latestRelease = laterReleases.toSorted(function (a, b) {
            return Core__Date.compare(new Date(b.published_at), new Date(a.published_at));
          })[0];
    if (latestRelease !== undefined) {
      var getAgdaVersion = function (asset) {
        return asset.name.replace(/als-Agda-/, "").replace(/-.*/, "");
      };
      var assets = chooseAssetFromRelease(latestRelease);
      latestALS = assets.toSorted(function (a, b) {
                return Util$AgdaModeVscode.Version.compare(getAgdaVersion(b), getAgdaVersion(a));
              }).map(function (asset) {
              return {
                      release: latestRelease,
                      asset: asset,
                      saveAsFileName: "latest-als"
                    };
            })[0];
    } else {
      latestALS = undefined;
    }
  } else {
    latestALS = undefined;
  }
  Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidChangeSelection(function (selectedItems) {
            Core__Option.forEach(selectedItems[0], (function (item) {
                    handleSelection(qp, state.memento, latestALS, state.globalStorageUri.fsPath, item);
                  }));
          }), qp.subscriptions);
  return Util$AgdaModeVscode.Disposable.add(qp.quickPick.onDidHide(function () {
                  destroy(qp);
                }), qp.subscriptions);
}

exports.openGlobalStorageFolder = openGlobalStorageFolder;
exports.switchAgdaVersion = switchAgdaVersion;
exports.LatestALS = LatestALS;
exports.QP = QP;
exports.handleSelection = handleSelection;
exports.run = run;
/* vscode Not a pure module */
