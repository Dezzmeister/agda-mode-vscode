// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var WebviewPanel$AgdaModeVscode = require("../View/WebviewPanel.bs.js");

function make() {
  return {
          queue: [],
          busy: false
        };
}

function kickStart(self) {
  if (self.busy) {
    return ;
  }
  var thunk = self.queue.shift();
  if (thunk !== undefined) {
    self.busy = true;
    thunk().finally(function () {
          self.busy = false;
          kickStart(self);
        });
    return ;
  }
  
}

function push(self, sendRequestAndHandleResponses, request) {
  var match = Util$AgdaModeVscode.Promise_.pending();
  var resolve = match[1];
  var thunk = async function () {
    await sendRequestAndHandleResponses(request);
    return resolve();
  };
  self.queue.push(thunk);
  kickStart(self);
  return match[0];
}

var RequestQueue = {
  make: make,
  push: push
};

function make$1() {
  return {
          display: undefined,
          prompt: undefined
        };
}

function cacheEvent(self, $$event) {
  if (typeof $$event !== "object" || $$event.TAG !== "Display") {
    return ;
  } else {
    self.display = [
      $$event._0,
      $$event._1
    ];
    return ;
  }
}

function cacheRequest(self, $$event, callback) {
  self.prompt = [
    $$event._0,
    $$event._1,
    callback
  ];
}

function clearPrompt(self) {
  self.prompt = undefined;
}

function restore(self, view) {
  var match = self.prompt;
  if (match !== undefined) {
    WebviewPanel$AgdaModeVscode.sendRequest(view, {
          TAG: "Prompt",
          _0: match[0],
          _1: match[1],
          [Symbol.for("name")]: "Prompt"
        }, match[2]);
    return ;
  } else {
    return Core__Option.forEach(self.display, (function (param) {
                  WebviewPanel$AgdaModeVscode.sendEvent(view, {
                        TAG: "Display",
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Display"
                      });
                }));
  }
}

var ViewCache = {
  make: make$1,
  cacheEvent: cacheEvent,
  cacheRequest: cacheRequest,
  clearPrompt: clearPrompt,
  restore: restore
};

function toString(log) {
  switch (log.TAG) {
    case "CommandDispatched" :
        return " <=== " + Command$AgdaModeVscode.toString(log._0);
    case "CommandHandled" :
        return " ===> " + Command$AgdaModeVscode.toString(log._0);
    case "RequestSent" :
        return "   <- " + Request$AgdaModeVscode.toString(log._0);
    case "ResponseHandled" :
        return "    > " + Response$AgdaModeVscode.toString(log._0);
    case "Others" :
        return log._0;
    
  }
}

var Log = {
  toString: toString
};

function setPrompt(value) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", value);
}

function setIM(value) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", value);
}

var Context = {
  setPrompt: setPrompt,
  setIM: setIM
};

exports.RequestQueue = RequestQueue;
exports.ViewCache = ViewCache;
exports.Log = Log;
exports.Context = Context;
/* vscode Not a pure module */
