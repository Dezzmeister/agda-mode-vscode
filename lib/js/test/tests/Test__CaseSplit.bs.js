// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Goal$AgdaModeVscode = require("../../src/State/State__Goal.bs.js");

describe("State__Goal.caseSplitAux dry run", (function () {
        Test__Util$AgdaModeVscode.Q.it("should calculate the infomation needed for case splitting correctly", (async function () {
                var editor = await Vscode.window.showTextDocument(Vscode.Uri.file(Test__Util$AgdaModeVscode.Path.asset("CaseSplit1.agda")), undefined);
                var $$document = editor.document;
                var goals = await Goal$AgdaModeVscode.makeMany(editor, [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]);
                var results = goals.map(function (goal) {
                      var match = State__Goal$AgdaModeVscode.caseSplitAux($$document, goal);
                      var rewriteRange = match[2];
                      var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                      return [
                              match[0],
                              match[1],
                              Editor$AgdaModeVscode.$$Text.get($$document, rewriteRange$1)
                            ];
                    });
                return {
                        TAG: "Ok",
                        _0: Curry._3(Assert.deepEqual, results, [
                              [
                                false,
                                9,
                                "x → {!   !}"
                              ],
                              [
                                false,
                                23,
                                "y → {!   !}"
                              ],
                              [
                                false,
                                4,
                                "x → {!   !}"
                              ],
                              [
                                false,
                                4,
                                "y → {!   !}"
                              ],
                              [
                                true,
                                13,
                                "x → {!   !}"
                              ],
                              [
                                true,
                                13,
                                "y → {!   !}"
                              ],
                              [
                                true,
                                2,
                                "x → {!   !}"
                              ],
                              [
                                true,
                                2,
                                "y → {!   !}"
                              ],
                              [
                                false,
                                13,
                                "x → {!   !}"
                              ]
                            ], undefined),
                        [Symbol.for("name")]: "Ok"
                      };
              }));
      }));

describe.skip("Integration test", (function () {
        var fileContent = {
          contents: ""
        };
        Test__Util$AgdaModeVscode.Q.before(function () {
              return Test__Util$AgdaModeVscode.readFile(Test__Util$AgdaModeVscode.Path.asset("CaseSplit2.agda"), fileContent);
            });
        Test__Util$AgdaModeVscode.Q.after(function () {
              return Test__Util$AgdaModeVscode.restoreFile(Test__Util$AgdaModeVscode.Path.asset("CaseSplit2.agda"), fileContent);
            });
        it("should have more goals after splitting", (async function () {
                var context = await Test__Util$AgdaModeVscode.Agda.make(undefined, "CaseSplit2.agda");
                var result = await Test__Util$AgdaModeVscode.Agda.load(context);
                if (result.TAG === "Ok") {
                  var error = await Test__Util$AgdaModeVscode.Agda.$$case([
                        new Vscode.Position(7, 16),
                        "x"
                      ], result._0);
                  if (error.TAG === "Ok") {
                    return Curry._3(Assert.deepEqual, error._0[1].goals.length, 10, undefined);
                  }
                  throw error._0;
                }
                throw result._0;
              }));
      }));

/*  Not a pure module */
