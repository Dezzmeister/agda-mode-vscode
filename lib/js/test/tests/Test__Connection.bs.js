// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Nodeurl = require("node:url");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var OS$AgdaModeVscode = require("../../src/Util/OS.bs.js");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Config$AgdaModeVscode = require("../../src/Config.bs.js");
var Connection$AgdaModeVscode = require("../../src/Connection/Connection.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Memento$AgdaModeVscode = require("../../src/State/State__Memento.bs.js");
var Connection__URI$AgdaModeVscode = require("../../src/Connection/Connection__URI.bs.js");
var Connection__Error$AgdaModeVscode = require("../../src/Connection/Connection__Error.bs.js");
var Connection__Target$AgdaModeVscode = require("../../src/Connection/Connection__Target.bs.js");
var Connection__Command__Search$AgdaModeVscode = require("../../src/Connection/Connection__Command__Search.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../../src/Connection/Download/Connection__Download__Platform.bs.js");

describe("Connection", (function () {
        describe("URI.parse", (function () {
                it("should be able to parse URIs with lsp: as the protocol", (async function () {
                        var actual = Connection__URI$AgdaModeVscode.parse("lsp://path/to/als");
                        var expected = {
                          TAG: "URL",
                          _0: new Nodeurl.URL("lsp://path/to/als"),
                          [Symbol.for("name")]: "URL"
                        };
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                it("should be able to parse file paths", (async function () {
                        var actual = Connection__URI$AgdaModeVscode.parse("path/to/als");
                        var expected = OS$AgdaModeVscode.onUnix ? ({
                              TAG: "Filepath",
                              _0: "path/to/als",
                              [Symbol.for("name")]: "Filepath"
                            }) : ({
                              TAG: "Filepath",
                              _0: "path\\to\\als",
                              [Symbol.for("name")]: "Filepath"
                            });
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                it("should be able to parse convert \"/c/path/to/agda\" to \"c:/path/to/agda\" on Windows", (async function () {
                        var actual = Connection__URI$AgdaModeVscode.parse("/c/path/to/agda");
                        var expected = OS$AgdaModeVscode.onUnix ? ({
                              TAG: "Filepath",
                              _0: "/c/path/to/agda",
                              [Symbol.for("name")]: "Filepath"
                            }) : ({
                              TAG: "Filepath",
                              _0: "c:\\path\\to\\agda",
                              [Symbol.for("name")]: "Filepath"
                            });
                        Curry._3(Assert.deepEqual, actual, expected, undefined);
                        var actual$1 = Connection__URI$AgdaModeVscode.parse("/d/path/to/agda");
                        var expected$1 = OS$AgdaModeVscode.onUnix ? ({
                              TAG: "Filepath",
                              _0: "/d/path/to/agda",
                              [Symbol.for("name")]: "Filepath"
                            }) : ({
                              TAG: "Filepath",
                              _0: "d:\\path\\to\\agda",
                              [Symbol.for("name")]: "Filepath"
                            });
                        return Curry._3(Assert.deepEqual, actual$1, expected$1, undefined);
                      }));
              }));
        describe("Target", (function () {
                var agdaMockPath = {
                  contents: ""
                };
                var agdaMockTarget = {
                  contents: undefined
                };
                before(async function () {
                      agdaMockPath.contents = await Test__Util$AgdaModeVscode.Target.Agda.mock("2.7.0.1", "agda-mock");
                      var target = await Connection__Target$AgdaModeVscode.fromRawPath(agdaMockPath.contents);
                      if (target.TAG === "Ok") {
                        agdaMockTarget.contents = target._0;
                        return ;
                      } else {
                        return PervasivesU.failwith("Got error when trying to construct a mock for Agda ");
                      }
                    });
                it("should return the previously picked connection", (async function () {
                        var target = agdaMockTarget.contents;
                        var agdaMockTarget$1 = target !== undefined ? target : PervasivesU.failwith("Unable to access the Agda mock target");
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        await Connection__Target$AgdaModeVscode.setPicked(memento, agdaMockTarget$1);
                        var paths = [
                            agdaMockPath.contents,
                            "path/to/als"
                          ].map(Connection__URI$AgdaModeVscode.parse);
                        var actual = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
                        var expected = {
                          TAG: "Ok",
                          _0: agdaMockTarget$1,
                          [Symbol.for("name")]: "Ok"
                        };
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                it("should return nothing when there's no previously picked connection", (async function () {
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        var paths = [
                            "path/to/agda",
                            "path/to/als"
                          ].map(Connection__URI$AgdaModeVscode.parse);
                        var actual = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
                        var expected = OS$AgdaModeVscode.onUnix ? ({
                              TAG: "Error",
                              _0: [
                                {
                                  TAG: "ValidationError",
                                  _0: "path/to/agda",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path/to/agda",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                },
                                {
                                  TAG: "ValidationError",
                                  _0: "path/to/als",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path/to/als",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                }
                              ],
                              [Symbol.for("name")]: "Error"
                            }) : ({
                              TAG: "Error",
                              _0: [
                                {
                                  TAG: "ValidationError",
                                  _0: "path\\to\\agda",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path\\to\\agda",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                },
                                {
                                  TAG: "ValidationError",
                                  _0: "path\\to\\als",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path\\to\\als",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                }
                              ],
                              [Symbol.for("name")]: "Error"
                            });
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                it("should return nothing when the previously picked connection is not in the supplied paths", (async function () {
                        var target = agdaMockTarget.contents;
                        var agdaMockTarget$1 = target !== undefined ? target : PervasivesU.failwith("Unable to access the Agda mock target");
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        await Connection__Target$AgdaModeVscode.setPicked(memento, agdaMockTarget$1);
                        var paths = [
                            "path/to/agda",
                            "path/to/als"
                          ].map(Connection__URI$AgdaModeVscode.parse);
                        var actual = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
                        var expected = OS$AgdaModeVscode.onUnix ? ({
                              TAG: "Error",
                              _0: [
                                {
                                  TAG: "ValidationError",
                                  _0: "path/to/agda",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path/to/agda",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                },
                                {
                                  TAG: "ValidationError",
                                  _0: "path/to/als",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path/to/als",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                }
                              ],
                              [Symbol.for("name")]: "Error"
                            }) : ({
                              TAG: "Error",
                              _0: [
                                {
                                  TAG: "ValidationError",
                                  _0: "path\\to\\agda",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path\\to\\agda",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                },
                                {
                                  TAG: "ValidationError",
                                  _0: "path\\to\\als",
                                  _1: {
                                    TAG: "NotFound",
                                    _0: "path\\to\\als",
                                    [Symbol.for("name")]: "NotFound"
                                  },
                                  [Symbol.for("name")]: "ValidationError"
                                }
                              ],
                              [Symbol.for("name")]: "Error"
                            });
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                it("should return the first usable connection target when the previously picked connection is invalid or not in the supplied paths", (async function () {
                        var target = agdaMockTarget.contents;
                        var agdaMockTarget$1 = target !== undefined ? target : PervasivesU.failwith("Unable to access the Agda mock target");
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        var paths = [
                            "path/to/non-existent-agda",
                            agdaMockPath.contents,
                            "path/to/non-existent-als"
                          ].map(Connection__URI$AgdaModeVscode.parse);
                        var actual = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
                        var expected = {
                          TAG: "Ok",
                          _0: agdaMockTarget$1,
                          [Symbol.for("name")]: "Ok"
                        };
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
                after(async function () {
                      var target = agdaMockTarget.contents;
                      if (target !== undefined) {
                        Test__Util$AgdaModeVscode.Target.Agda.destroy(target);
                        agdaMockTarget.contents = undefined;
                        return ;
                      }
                      
                    });
              }));
        describe("Command searching", (function () {
                it("should be able to find itself (`which` or `where`)", (async function () {
                        if (OS$AgdaModeVscode.onUnix) {
                          var _output = await Connection__Command__Search$AgdaModeVscode.search("which", undefined);
                          if (_output.TAG === "Ok") {
                            return ;
                          } else {
                            return PervasivesU.failwith("expected to find `which`");
                          }
                        }
                        var _output$1 = await Connection__Command__Search$AgdaModeVscode.search("where", undefined);
                        if (_output$1.TAG === "Ok") {
                          return ;
                        } else {
                          return PervasivesU.failwith("expected to find `where`");
                        }
                      }));
                it("should return an error when the command is not found", (async function () {
                        var _output = await Connection__Command__Search$AgdaModeVscode.search("non-existent-command", undefined);
                        if (_output.TAG === "Ok") {
                          return PervasivesU.failwith("expected to not find `non-existent-command`");
                        }
                        
                      }));
              }));
        describe("findCommands", (function () {
                it("should return the connection when a command is found", (async function () {
                        var commands = [
                          "agda",
                          "als"
                        ];
                        var error = await Connection$AgdaModeVscode.findCommands(commands);
                        if (error.TAG === "Ok") {
                          return ;
                        }
                        var match = Connection__Error$AgdaModeVscode.toString({
                              TAG: "CommandsNotFound",
                              _0: error._0,
                              [Symbol.for("name")]: "CommandsNotFound"
                            });
                        return PervasivesU.failwith("expected to find `agda` or `als`: " + match[0] + " - " + match[1]);
                      }));
                it("should return an error when the command is not found", (async function () {
                        var commands = ["non-existent-command"];
                        var match = await Connection$AgdaModeVscode.findCommands(commands);
                        if (match.TAG === "Ok") {
                          return PervasivesU.failwith("expected to not find `non-existent-command`");
                        }
                        
                      }));
              }));
        describe("make", (function () {
                it("Memento: [] / paths: [] / commands: ['agda', 'als']", (async function () {
                        var path = await Connection$AgdaModeVscode.findCommands(["agda"]);
                        var path$1;
                        path$1 = path.TAG === "Ok" ? path._0 : PervasivesU.failwith("expected to find `agda`");
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        var commands = [
                          "agda",
                          "als"
                        ];
                        var platform = await Connection__Download__Platform$AgdaModeVscode.determine();
                        var getDownloadPolicy = async function () {
                          return "Undecided";
                        };
                        var downloadLatestALS = async function (param) {
                          return {
                                  TAG: "Error",
                                  _0: "CannotFindCompatibleALSRelease",
                                  [Symbol.for("name")]: "Error"
                                };
                        };
                        var error = await Connection$AgdaModeVscode.make(memento, paths, commands, platform, getDownloadPolicy, downloadLatestALS);
                        if (error.TAG !== "Ok") {
                          var match = Connection__Error$AgdaModeVscode.toString(error._0);
                          PervasivesU.failwith("expected to find `agda` or `als`: " + match[0] + " - " + match[1]);
                        }
                        Curry._3(Assert.deepEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [path$1].map(Connection__URI$AgdaModeVscode.parse), undefined);
                        var pathIsNowInConfig = Util$AgdaModeVscode.$$Array.includes(Config$AgdaModeVscode.Connection.getAgdaPaths(), Connection__URI$AgdaModeVscode.parse(path$1));
                        Assert.ok(pathIsNowInConfig);
                        var picked = await Connection__Target$AgdaModeVscode.getPicked(memento, Config$AgdaModeVscode.Connection.getAgdaPaths());
                        if (picked.TAG === "Ok") {
                          return Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.toString(Connection__Target$AgdaModeVscode.toURI(picked._0)), path$1, undefined);
                        } else {
                          return PervasivesU.failwith("expected to find the picked connection");
                        }
                      }));
                it("Memento: [] / paths: ['some/other/path'] / commands: ['agda', 'als']", (async function () {
                        var path = await Connection$AgdaModeVscode.findCommands(["agda"]);
                        var path$1;
                        if (path.TAG === "Ok") {
                          var target = await Connection__Target$AgdaModeVscode.fromRawPath(path._0);
                          path$1 = target.TAG === "Ok" ? Connection__Target$AgdaModeVscode.toURI(target._0) : PervasivesU.failwith("expected to find `agda`");
                        } else {
                          path$1 = PervasivesU.failwith("expected to find `agda`");
                        }
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(["some/other/path"].map(Connection__URI$AgdaModeVscode.parse));
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        var commands = [
                          "agda",
                          "als"
                        ];
                        var platform = await Connection__Download__Platform$AgdaModeVscode.determine();
                        var getDownloadPolicy = async function () {
                          return "Undecided";
                        };
                        var downloadLatestALS = async function (param) {
                          return {
                                  TAG: "Error",
                                  _0: "CannotFindCompatibleALSRelease",
                                  [Symbol.for("name")]: "Error"
                                };
                        };
                        var error = await Connection$AgdaModeVscode.make(memento, paths, commands, platform, getDownloadPolicy, downloadLatestALS);
                        if (error.TAG !== "Ok") {
                          var match = Connection__Error$AgdaModeVscode.toString(error._0);
                          PervasivesU.failwith("expected to find `agda` or `als`: " + match[0] + " - " + match[1]);
                        }
                        Curry._3(Assert.deepEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), Belt_Array.concatMany([
                                  paths,
                                  [path$1]
                                ]), undefined);
                        var pathIsNowInConfig = Util$AgdaModeVscode.$$Array.includes(Config$AgdaModeVscode.Connection.getAgdaPaths(), path$1);
                        Assert.ok(pathIsNowInConfig);
                        var picked = await Connection__Target$AgdaModeVscode.getPicked(memento, Config$AgdaModeVscode.Connection.getAgdaPaths());
                        if (picked.TAG === "Ok") {
                          return Curry._3(Assert.deepStrictEqual, Connection__Target$AgdaModeVscode.toURI(picked._0), path$1, undefined);
                        } else {
                          return PervasivesU.failwith("expected to find the picked connection");
                        }
                      }));
                it("Memento: [] / paths: ['agda', 'others'] / commands: ['agda', 'als']", (async function () {
                        var path = await Connection$AgdaModeVscode.findCommands(["agda"]);
                        var path$1;
                        if (path.TAG === "Ok") {
                          var target = await Connection__Target$AgdaModeVscode.fromRawPath(path._0);
                          path$1 = target.TAG === "Ok" ? Connection__Target$AgdaModeVscode.toURI(target._0) : PervasivesU.failwith("expected to find `agda`");
                        } else {
                          path$1 = PervasivesU.failwith("expected to find `agda`");
                        }
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([
                              path$1,
                              Connection__URI$AgdaModeVscode.parse("some/other/path")
                            ]);
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        var commands = [
                          "agda",
                          "als"
                        ];
                        var platform = await Connection__Download__Platform$AgdaModeVscode.determine();
                        var getDownloadPolicy = async function () {
                          return "Undecided";
                        };
                        var downloadLatestALS = async function (param) {
                          return {
                                  TAG: "Error",
                                  _0: "CannotFindCompatibleALSRelease",
                                  [Symbol.for("name")]: "Error"
                                };
                        };
                        var error = await Connection$AgdaModeVscode.make(memento, paths, commands, platform, getDownloadPolicy, downloadLatestALS);
                        if (error.TAG !== "Ok") {
                          var match = Connection__Error$AgdaModeVscode.toString(error._0);
                          PervasivesU.failwith("expected to find `agda` or `als`: " + match[0] + " - " + match[1]);
                        }
                        Curry._3(Assert.deepEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), paths, undefined);
                        var picked = await Connection__Target$AgdaModeVscode.getPicked(memento, Config$AgdaModeVscode.Connection.getAgdaPaths());
                        if (picked.TAG === "Ok") {
                          return Curry._3(Assert.deepStrictEqual, Connection__Target$AgdaModeVscode.toURI(picked._0), path$1, undefined);
                        } else {
                          return PervasivesU.failwith("expected to find the picked connection");
                        }
                      }));
                describe.skip("Platform", (function () {
                        it("should throw an error when the platform is not supported", (async function () {
                                var memento = State__Memento$AgdaModeVscode.make(undefined);
                                var paths = [Connection__URI$AgdaModeVscode.parse("some/other/path")];
                                var commands = ["non-existent-command"];
                                var platform = {
                                  os: "non-existent-os",
                                  dist: "non-existent-dist",
                                  codename: "non-existent-codename",
                                  release: "non-existent-release"
                                };
                                var getDownloadPolicy = async function () {
                                  return "Undecided";
                                };
                                var downloadLatestALS = async function (param) {
                                  return {
                                          TAG: "Error",
                                          _0: "CannotFindCompatibleALSRelease",
                                          [Symbol.for("name")]: "Error"
                                        };
                                };
                                var result = await Connection$AgdaModeVscode.make(memento, paths, commands, {
                                      TAG: "Error",
                                      _0: platform,
                                      [Symbol.for("name")]: "Error"
                                    }, getDownloadPolicy, downloadLatestALS);
                                var expectedAttempts_targets = [{
                                    uri: Connection__URI$AgdaModeVscode.parse("some/other/path"),
                                    error: {
                                      TAG: "ValidationError",
                                      _0: "some/other/path",
                                      _1: {
                                        TAG: "NotFound",
                                        _0: "some/other/path",
                                        [Symbol.for("name")]: "NotFound"
                                      },
                                      [Symbol.for("name")]: "ValidationError"
                                    }
                                  }];
                                var expectedAttempts_commands = [{
                                    command: "non-existent-command",
                                    error: undefined
                                  }];
                                var expectedAttempts = {
                                  targets: expectedAttempts_targets,
                                  commands: expectedAttempts_commands
                                };
                                return Curry._3(Assert.deepEqual, result, {
                                            TAG: "Error",
                                            _0: {
                                              TAG: "Aggregated",
                                              _0: {
                                                TAG: "PlatformNotSupported",
                                                _0: expectedAttempts,
                                                _1: platform,
                                                [Symbol.for("name")]: "PlatformNotSupported"
                                              },
                                              [Symbol.for("name")]: "Aggregated"
                                            },
                                            [Symbol.for("name")]: "Error"
                                          }, undefined);
                              }));
                      }));
              }));
      }));

/*  Not a pure module */
