// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Memento$AgdaModeVscode = require("../../src/State/State__Memento.bs.js");
var Connection__Error$AgdaModeVscode = require("../../src/Connection/Connection__Error.bs.js");
var Connection__Target$AgdaModeVscode = require("../../src/Connection/Connection__Target.bs.js");

describe("Connection", (function () {
        describe("Picked connection", (function () {
                it("should return the previously picked connection", (async function () {
                        var agdaMockPath = await Test__Util$AgdaModeVscode.Target.Agda.mock("2.7.0.1", "agda-mock");
                        var target = await Connection__Target$AgdaModeVscode.fromRawPath(agdaMockPath);
                        var agdaMockTarget;
                        if (target.TAG === "Ok") {
                          agdaMockTarget = target._0;
                        } else {
                          var error = target._0;
                          agdaMockTarget = PervasivesU.failwith("Got error when trying to construct a mock for Agda:\n" + Connection__Error$AgdaModeVscode.toString(error)[0] + ": " + Connection__Error$AgdaModeVscode.toString(error)[1]);
                        }
                        var memento = State__Memento$AgdaModeVscode.make(undefined);
                        await Connection__Target$AgdaModeVscode.setPicked(memento, agdaMockTarget);
                        var paths = [
                          agdaMockPath,
                          "path/to/als"
                        ];
                        var actual = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
                        var expected = agdaMockTarget;
                        return Curry._3(Assert.deepEqual, actual, expected, undefined);
                      }));
              }));
      }));

/*  Not a pure module */
