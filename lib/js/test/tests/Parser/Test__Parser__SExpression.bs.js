// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Assert = require("assert");
var Js_array = require("rescript/lib/js/js_array.js");
var Parser$AgdaModeVscode = require("../../../src/Parser/Parser.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

function parseSExpression(breakpoints, input) {
  var output = {
    contents: []
  };
  var parser = Parser$AgdaModeVscode.SExpression.makeIncr(function (x) {
        if (typeof x !== "object") {
          return ;
        }
        var a = x._0;
        if (a.TAG === "Ok") {
          Js_array.push(a._0, output.contents);
          return ;
        }
        var match = a._0;
        Assert.fail("Failed when parsing S-expression: " + Parser$AgdaModeVscode.$$Error.toString({
                  TAG: "SExpression",
                  _0: match[0],
                  _1: match[1],
                  [Symbol.for("name")]: "SExpression"
                }));
      });
  Test__Util$AgdaModeVscode.Strings.breakInput(input.trim(), breakpoints).map(Parser$AgdaModeVscode.splitToLines).flat().forEach(function (extra) {
        return Parser$AgdaModeVscode.Incr.feed(parser, extra);
      });
  return output.contents;
}

describe("when parsing S-expressions as a whole", (function () {
        Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/SExpression").forEach(function (filepath) {
              it("should golden test " + filepath, (async function () {
                      var raw = await Test__Util$AgdaModeVscode.Golden.readFile(filepath);
                      return await Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (extra) {
                                            return parseSExpression([], extra);
                                          })), (function (extra) {
                                        return Test__Util$AgdaModeVscode.Strings.unlinesWith(Parser$AgdaModeVscode.SExpression.toString, extra);
                                      })));
                    }));
            });
      }));

describe("when parsing S-expressions incrementally", (function () {
        Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/SExpression").forEach(function (filepath) {
              it("should golden test " + filepath, (async function () {
                      var raw = await Test__Util$AgdaModeVscode.Golden.readFile(filepath);
                      return await Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (extra) {
                                            return parseSExpression([
                                                        3,
                                                        23,
                                                        171,
                                                        217,
                                                        1234,
                                                        2342,
                                                        3453
                                                      ], extra);
                                          })), (function (extra) {
                                        return Test__Util$AgdaModeVscode.Strings.unlinesWith(Parser$AgdaModeVscode.SExpression.toString, extra);
                                      })));
                    }));
            });
      }));

exports.parseSExpression = parseSExpression;
/*  Not a pure module */
