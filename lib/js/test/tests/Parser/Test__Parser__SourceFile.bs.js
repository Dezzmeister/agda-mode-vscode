// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Js_string = require("rescript/lib/js/js_string.js");
var SourceFile$AgdaModeVscode = require("../../../src/Parser/SourceFile.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

describe("when parsing file paths", (function () {
        it("should recognize the file extensions", (function () {
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.agda"), "Agda", undefined);
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.lagda"), "LiterateTeX", undefined);
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.lagda.tex"), "LiterateTeX", undefined);
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.lagda.md"), "LiterateMarkdown", undefined);
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.lagda.rst"), "LiterateRST", undefined);
                Curry._3(Assert.equal, SourceFile$AgdaModeVscode.FileType.parse("a.lagda.org"), "LiterateOrg", undefined);
              }));
      }));

if (Test__Util$AgdaModeVscode.onUnix) {
  describe("when parsing source files (Unix only)", (function () {
          describe("Regex.comment", (function () {
                  it("should work", (function () {
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "no comment"), -1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "no comment\n"), -1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "-- comment"), 0, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "-- comment with newline\n"), 0, undefined);
                        }));
                  it("should work when \"--\" is placed immediately after some text (issue #56)", (function () {
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "a -- comment after some text"), 2, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "a-- comment placed immediately after some text"), -1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "_-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, ";-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, ".-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "\"-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "(-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, ")-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "{-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "}-- comment placed immediately after name parts"), 1, undefined);
                          Curry._3(Assert.equal, Js_string.search(SourceFile$AgdaModeVscode.Regex.comment, "@-- comment placed immediately after name parts"), 1, undefined);
                        }));
                }));
          Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/SourceFile").forEach(function (filepath) {
                it("should golden test " + filepath, (async function () {
                        var raw = await Test__Util$AgdaModeVscode.Golden.readFile(filepath);
                        return Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (extra) {
                                              return SourceFile$AgdaModeVscode.parse([
                                                          0,
                                                          1,
                                                          2,
                                                          3,
                                                          4,
                                                          5,
                                                          6,
                                                          7,
                                                          8,
                                                          9
                                                        ], filepath, extra);
                                            })), (function (extra) {
                                          return Test__Util$AgdaModeVscode.Strings.unlinesWith(SourceFile$AgdaModeVscode.Diff.toString, extra);
                                        })));
                      }));
              });
        }));
}

/*  Not a pure module */
