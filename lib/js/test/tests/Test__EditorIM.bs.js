// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Js_string = require("rescript/lib/js/js_string.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var IM$AgdaModeVscode = require("../../src/InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

function acquire(setup) {
  var setup$1 = setup.contents;
  if (setup$1 !== undefined) {
    return Caml_option.valFromOption(setup$1);
  }
  throw {
        RE_EXN_ID: Test__Util$AgdaModeVscode.Exn,
        _1: "Setup is not initialized",
        Error: new Error()
      };
}

async function cleanup(setup) {
  var range = new Vscode.Range(new Vscode.Position(0, 0), new Vscode.Position(100, 0));
  await Editor$AgdaModeVscode.$$Text.replace(setup.editor.document, range, "");
}

function equal(xs) {
  return function (extra) {
    return Test__Util$AgdaModeVscode.A.equal(xs, extra);
  };
}

function deepEqual(xs) {
  return function (extra) {
    return Test__Util$AgdaModeVscode.A.deepEqual(xs, extra);
  };
}

async function wait(setup) {
  return await Chan$AgdaModeVscode.once(setup.channels.inputMethod);
}

async function wait2nd(setup) {
  await Chan$AgdaModeVscode.once(setup.channels.inputMethod);
  return await Chan$AgdaModeVscode.once(setup.channels.inputMethod);
}

async function activate(setup, positions, param) {
  var promise = wait(setup);
  var positions$1 = Core__Option.getOr(positions, Editor$AgdaModeVscode.Cursor.getMany(setup.editor));
  Editor$AgdaModeVscode.Cursor.setMany(setup.editor, positions$1);
  var result = Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]");
  await result;
  return await promise;
}

async function deactivate(setup) {
  var promise = wait(setup);
  var result = Vscode.commands.executeCommand("agda-mode.escape");
  await result;
  return await promise;
}

async function insertChar(setup, $$char) {
  var promise1 = wait(setup);
  var promise2 = wait2nd(setup);
  var positions = Editor$AgdaModeVscode.Cursor.getMany(setup.editor);
  var succeed = await Editor$AgdaModeVscode.$$Text.batchInsert(setup.editor.document, positions, $$char);
  if (succeed) {
    var result1 = await promise1;
    var result2 = await promise2;
    return result1.concat(result2);
  }
  throw Js_exn.raiseError("Failed to insert " + $$char);
}

async function backspace(setup) {
  var promise1 = wait(setup);
  var promise2 = wait2nd(setup);
  var end_ = Editor$AgdaModeVscode.Cursor.get(setup.editor);
  var start = end_.translate(0, -1);
  var range = new Vscode.Range(start, end_);
  var succeed = await Editor$AgdaModeVscode.$$Text.$$delete(setup.editor.document, range);
  if (succeed) {
    var result1 = await promise1;
    var result2 = await promise2;
    return result1.concat(result2);
  }
  throw Js_exn.raiseError("Failed to backspace");
}

async function select(setup, intervals) {
  var ranges = intervals.map(function (extra) {
        return Editor$AgdaModeVscode.$$Range.fromInterval(setup.editor.document, extra);
      });
  return Editor$AgdaModeVscode.$$Selection.setMany(setup.editor, ranges);
}

async function selectAndWait(setup, intervals) {
  var promise = wait(setup);
  var ranges = intervals.map(function (extra) {
        return Editor$AgdaModeVscode.$$Range.fromInterval(setup.editor.document, extra);
      });
  Editor$AgdaModeVscode.$$Selection.setMany(setup.editor, ranges);
  return await promise;
}

var IM = {
  Input: IM$AgdaModeVscode.Input,
  Output: IM$AgdaModeVscode.Output,
  Log: IM$AgdaModeVscode.Log,
  Module: IM$AgdaModeVscode.Module,
  make: IM$AgdaModeVscode.make,
  isActivated: IM$AgdaModeVscode.isActivated,
  bufferIsEmpty: IM$AgdaModeVscode.bufferIsEmpty,
  run: IM$AgdaModeVscode.run,
  equal: equal,
  deepEqual: deepEqual,
  wait: wait,
  wait2nd: wait2nd,
  activate: activate,
  deactivate: deactivate,
  insertChar: insertChar,
  backspace: backspace,
  select: select,
  selectAndWait: selectAndWait
};

describe("Input Method (Editor)", (function () {
        var setup = {
          contents: undefined
        };
        before(async function () {
              var match = await Test__Util$AgdaModeVscode.activateExtensionAndOpenFile(Test__Util$AgdaModeVscode.Path.asset("InputMethod.agda"));
              setup.contents = {
                editor: match[0],
                channels: match[1]
              };
            });
        afterEach(async function () {
              var setup$1 = acquire(setup);
              return await cleanup(setup$1);
            });
        describe("Insertion", (function () {
                it("should translate \"lambdabar\" to \"λ\"", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "l");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      1
                                    ],
                                    "←"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "←", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "←a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$3 = await insertChar(setup$1, "m");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$3, undefined);
                        Curry._3(Assert.equal, "←am", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$4 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$4, undefined);
                        Curry._3(Assert.equal, "←amb", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$5 = await insertChar(setup$1, "d");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$5, undefined);
                        Curry._3(Assert.equal, "←ambd", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$6 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      6
                                    ],
                                    "λ"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$6, undefined);
                        Curry._3(Assert.equal, "λ", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$7 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$7, undefined);
                        Curry._3(Assert.equal, "λb", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$8 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$8, undefined);
                        Curry._3(Assert.equal, "λba", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$9 = await insertChar(setup$1, "r");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      4
                                    ],
                                    "ƛ"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$9, undefined);
                        return Curry._3(Assert.equal, "ƛ", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
                it("should translate \"bn\" to \"𝕟\"", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      1
                                    ],
                                    "♭"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "♭", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "n");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      2
                                    ],
                                    "𝕟"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$2, undefined);
                        return Curry._3(Assert.equal, "𝕟", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
                it("Issue #55, should not deactivate when size of candidate symbols > 1", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "s");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "as", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$3 = await insertChar(setup$1, "t");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      3
                                    ],
                                    "∗"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$3, undefined);
                        Curry._3(Assert.equal, "∗", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$4 = await insertChar(setup$1, "e");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$4, undefined);
                        Curry._3(Assert.equal, "∗e", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$5 = await insertChar(setup$1, "r");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$5, undefined);
                        Curry._3(Assert.equal, "∗er", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$6 = await insertChar(setup$1, "i");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$6, undefined);
                        Curry._3(Assert.equal, "∗eri", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$7 = await insertChar(setup$1, "s");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$7, undefined);
                        Curry._3(Assert.equal, "∗eris", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$8 = await insertChar(setup$1, "k");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      6
                                    ],
                                    "⁎"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$8, undefined);
                        Curry._3(Assert.equal, "⁎", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$9 = await deactivate(setup$1);
                        Curry._3(Assert.deepEqual, ["Deactivate"], log$9, undefined);
                        return Curry._3(Assert.equal, "⁎", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
              }));
        describe("Backspacing", (function () {
                it("should work just fine", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "l");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      1
                                    ],
                                    "←"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "←", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "←a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$3 = await backspace(setup$1);
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      1
                                    ],
                                    "←"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$3, undefined);
                        Curry._3(Assert.equal, "←", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$4 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$4, undefined);
                        Curry._3(Assert.equal, "←a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$5 = await insertChar(setup$1, "m");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$5, undefined);
                        Curry._3(Assert.equal, "←am", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$6 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$6, undefined);
                        Curry._3(Assert.equal, "←amb", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$7 = await insertChar(setup$1, "d");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$7, undefined);
                        Curry._3(Assert.equal, "←ambd", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$8 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      6
                                    ],
                                    "λ"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$8, undefined);
                        Curry._3(Assert.equal, "λ", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$9 = await backspace(setup$1);
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      0
                                    ],
                                    "lambd"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$9, undefined);
                        Curry._3(Assert.equal, "lambd", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$10 = await deactivate(setup$1);
                        Curry._3(Assert.deepEqual, ["Deactivate"], log$10, undefined);
                        return Curry._3(Assert.equal, "lambd", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
              }));
        describe("Abortion", (function () {
                it("should abort after hitting escape", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      1
                                    ],
                                    "♭"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "♭", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await deactivate(setup$1);
                        Curry._3(Assert.deepEqual, ["Deactivate"], log$2, undefined);
                        return Curry._3(Assert.equal, "♭", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
                it("should abort after typing the wrong sequence", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "d");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$2, undefined);
                        return Curry._3(Assert.equal, "ad", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
                it("should abort after backspacing to much", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await backspace(setup$1);
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      0
                                    ],
                                    ""
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$2, undefined);
                        return Curry._3(Assert.equal, "", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
              }));
        describe("Cursor", (function () {
                it("should not abort when the cursor is placed inside the buffer", (async function () {
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        var log = await activate(setup$1, undefined, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "n");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "an", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        await select(setup$1, [[
                                0,
                                0
                              ]]);
                        await select(setup$1, [[
                                1,
                                1
                              ]]);
                        await select(setup$1, [[
                                2,
                                2
                              ]]);
                        await select(setup$1, [
                              [
                                0,
                                1
                              ],
                              [
                                1,
                                2
                              ]
                            ]);
                        await select(setup$1, [[
                                0,
                                2
                              ]]);
                        var log$3 = await insertChar(setup$1, "d");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      3
                                    ],
                                    "∧"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$3, undefined);
                        Curry._3(Assert.equal, "∧", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$4 = await insertChar(setup$1, "=");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [[
                                    [
                                      0,
                                      2
                                    ],
                                    "≙"
                                  ]],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$4, undefined);
                        return Curry._3(Assert.equal, "≙", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                      }));
                it("should abort when the cursor is placed outside the buffer", (async function () {
                        var setup$1 = acquire(setup);
                        var positions = [new Vscode.Position(0, 3)];
                        var $$document = setup$1.editor.document;
                        await Editor$AgdaModeVscode.$$Text.insert($$document, new Vscode.Position(0, 0), "123");
                        var log = await activate(setup$1, positions, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "123a", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$2 = await insertChar(setup$1, "n");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "123an", Editor$AgdaModeVscode.$$Text.getAll($$document), undefined);
                        var log$3 = await selectAndWait(setup$1, [[
                                1,
                                1
                              ]]);
                        return Curry._3(Assert.deepEqual, ["Deactivate"], log$3, undefined);
                      }));
              }));
        describe("Multiple cursors at once", (function () {
                var partial_arg = /\r\n/g;
                var replaceCRLF = function (param) {
                  return Js_string.replaceByRe(partial_arg, "\n", param);
                };
                it("should work just fine (𝕟)", (async function () {
                        var positions = [
                          new Vscode.Position(0, 0),
                          new Vscode.Position(1, 0),
                          new Vscode.Position(2, 0),
                          new Vscode.Position(3, 0)
                        ];
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        await Editor$AgdaModeVscode.$$Text.insert($$document, new Vscode.Position(0, 0), "\n\n\n");
                        var log = await activate(setup$1, positions, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "b");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [
                                  [
                                    [
                                      0,
                                      1
                                    ],
                                    "♭"
                                  ],
                                  [
                                    [
                                      2,
                                      3
                                    ],
                                    "♭"
                                  ],
                                  [
                                    [
                                      4,
                                      5
                                    ],
                                    "♭"
                                  ],
                                  [
                                    [
                                      6,
                                      7
                                    ],
                                    "♭"
                                  ]
                                ],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "♭\n♭\n♭\n♭", Curry._1(replaceCRLF, Editor$AgdaModeVscode.$$Text.getAll($$document)), undefined);
                        var log$2 = await insertChar(setup$1, "n");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [
                                  [
                                    [
                                      0,
                                      2
                                    ],
                                    "𝕟"
                                  ],
                                  [
                                    [
                                      3,
                                      5
                                    ],
                                    "𝕟"
                                  ],
                                  [
                                    [
                                      6,
                                      8
                                    ],
                                    "𝕟"
                                  ],
                                  [
                                    [
                                      9,
                                      11
                                    ],
                                    "𝕟"
                                  ]
                                ],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "Deactivate",
                              "RewriteApplied"
                            ], log$2, undefined);
                        return Curry._3(Assert.equal, "𝕟\n𝕟\n𝕟\n𝕟", Curry._1(replaceCRLF, Editor$AgdaModeVscode.$$Text.getAll($$document)), undefined);
                      }));
                it("should work just fine (∧)", (async function () {
                        var positions = [
                          new Vscode.Position(0, 0),
                          new Vscode.Position(1, 1),
                          new Vscode.Position(2, 2),
                          new Vscode.Position(3, 3)
                        ];
                        var setup$1 = acquire(setup);
                        var $$document = setup$1.editor.document;
                        await Editor$AgdaModeVscode.$$Text.insert($$document, new Vscode.Position(0, 0), "123\n123\n123\n123");
                        var log = await activate(setup$1, positions, undefined);
                        Curry._3(Assert.deepEqual, ["Activate"], log, undefined);
                        var log$1 = await insertChar(setup$1, "a");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$1, undefined);
                        Curry._3(Assert.equal, "a123\n1a23\n12a3\n123a", Curry._1(replaceCRLF, Editor$AgdaModeVscode.$$Text.getAll($$document)), undefined);
                        var log$2 = await insertChar(setup$1, "n");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$2, undefined);
                        Curry._3(Assert.equal, "an123\n1an23\n12an3\n123an", Curry._1(replaceCRLF, Editor$AgdaModeVscode.$$Text.getAll($$document)), undefined);
                        var log$3 = await insertChar(setup$1, "d");
                        Curry._3(Assert.deepEqual, [
                              {
                                TAG: "RewriteIssued",
                                _0: [
                                  [
                                    [
                                      0,
                                      3
                                    ],
                                    "∧"
                                  ],
                                  [
                                    [
                                      8,
                                      11
                                    ],
                                    "∧"
                                  ],
                                  [
                                    [
                                      16,
                                      19
                                    ],
                                    "∧"
                                  ],
                                  [
                                    [
                                      24,
                                      27
                                    ],
                                    "∧"
                                  ]
                                ],
                                [Symbol.for("name")]: "RewriteIssued"
                              },
                              "UpdateView",
                              "RewriteApplied"
                            ], log$3, undefined);
                        return Curry._3(Assert.equal, "∧123\n1∧23\n12∧3\n123∧", Curry._1(replaceCRLF, Editor$AgdaModeVscode.$$Text.getAll($$document)), undefined);
                      }));
              }));
      }));

exports.acquire = acquire;
exports.cleanup = cleanup;
exports.IM = IM;
/*  Not a pure module */
