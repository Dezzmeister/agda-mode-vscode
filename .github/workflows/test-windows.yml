# This is a basic workflow to help you get started with Actions

name: CI (Windows)

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: windows-latest
    steps:

    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    # - name: 🏗 Install yq
    #   uses: frenck/action-setup-yq@v1

    - name: 🔍 Determine stack root and resolver
      ## 2023-11-21 https://github.com/commercialhaskell/stack/issues/6340
      ## Asking stack for the stack root unfortunately does not work
      ## if stack is not fully operational (meaning e.g. that GHC is installed)
      ## so we hardcode its location instead.
      run: |
        STACK_RESOLVER="lts-20.26"
        echo STACK_RESOLVER="${STACK_RESOLVER}" >> "${GITHUB_ENV}"
      # What about C:/Users/runneradmin/AppData/Roaming/stack ?

    # things to be cached/restored:
    - name: 💾 Restore cached stack global package db
      id:   stack-global
      uses: actions/cache/restore@v4
      with:
        path: C:\Users\runneradmin\AppData\Roaming\stack\
        key: ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-global-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-global

    - name: 💾 Restore cached stack-installed binaries   # ghc, ghc-included packages and their haddocks, mingw, msys2
      id:   stack-binaries
      uses: actions/cache/restore@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\Programs\stack\
        # which files signal a change in stack's global db ?
        # **.yaml includes */package.yaml and stack.yaml* (too many), and hopefully no other changing yamls
        key: ${{ runner.os }}-stack-binaries-${{ env.STACK_RESOLVER }}-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-binaries
    
    - name: 💾 Restore cached .stack-work
      id:   stack-work
      uses: actions/cache/restore@v4
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-work

    # actions:

    - name: ⏬ Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: ⏬ Install GHC
      # if: steps.stack-programs-dir.outputs.cache-hit != 'true'
      # set PATH=C:\Users\runneradmin\AppData\Local\Programs\stack\local\bin;%PATH%
      run: |
        stack --no-terminal setup --install-ghc

    - name: ⏬ Install the ICU library
      run: |
        stack exec -- pacman -S --noconfirm mingw-w64-x86_64-icu mingw-w64-x86_64-pkgconf
        stack exec -- pkg-config --modversion icu-i18n

    - name: 🛠️ Add Stack install directory to PATH 
      run: |
        echo "$APPDATA/local/bin" >> $GITHUB_PATH

    - name: ⏬ Install Agda
      run: |
        stack install --resolver ${{env.STACK_RESOLVER}} Agda-2.6.4
        where.exe agda
        agda --version

    # things to be cached

    - name: 💾 Cache stack global package db
      if:   always() && steps.stack-global.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: C:\Users\runneradmin\AppData\Roaming\stack\
        key: ${{ steps.stack-global.outputs.cache-primary-key }}

    - name: 💾 Cache stack-installed binaries
      if:   always() && steps.stack-binaries.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\Programs\stack\
        key: ${{ steps.stack-binaries.outputs.cache-primary-key }}
  
    - name: 💾 Cache .stack-work
      if:   always() && steps.stack-work.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: .stack-work
        key: ${{ steps.stack-work.outputs.cache-primary-key }}

    - name: ⏬ Install NPM Dependencies
      run: npm install
      
    - name: 🔨 Build stuff 
      run: npm run build

    - name: 🚗 Run tests (Windows)
      run: npm test