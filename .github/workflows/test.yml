# This is a basic workflow to help you get started with Actions

name: Test

defaults:
  run:
    shell: bash
    
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, dev, ci ]
  pull_request:
    branches: [ master, dev, ci ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-test:
    # Runs on all major platforms 
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        agda: ["Agda-2.6.4", "Agda-2.7.0"]
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # actions:

      - name: ⏬ Setup Haskell environment
        id: haskell-setup
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.2.8'
          stack-version: latest
          cabal-update: false
          enable-stack: true

      - name: 🛠️ Setting variables
        run: | 
          echo "STACK_LOCAL_BIN=$(stack path --local-bin)" >> "$GITHUB_ENV"

      - name: 🔍 Reviewing variables
        run: |
          echo "runner.os         = ${{ runner.os                               }}"
          echo "ghc-path          = ${{ steps.haskell-setup.outputs.ghc-path    }}"
          echo "ghc-exe           = ${{ steps.haskell-setup.outputs.ghc-exe     }}"
          echo "stack-path        = ${{ steps.haskell-setup.outputs.stack-path  }}"
          echo "stack-exe         = ${{ steps.haskell-setup.outputs.stack-exe   }}"
          echo "stack-root        = ${{ steps.haskell-setup.outputs.stack-root  }}"
          echo "STACK_LOCAL_BIN    = $STACK_LOCAL_BIN"
    
      # # cached stuff to be restored:
      # - name: 💾 Restore cached stack global package db
      #   id:   stack-global
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{ steps.haskell-setup.outputs.stack-root }}
      #     key: ${{ runner.os }}-stack-global-${{ matrix.agda }}
      #     restore-keys: |
      #         ${{ runner.os }}-stack-global

      - name: 💾 Restore stack-installed binaries in ~/.local/bin
        id:   stack-binaries
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.STACK_LOCAL_BIN  }}
          key: ${{ runner.os }}-stack-binaries-${{ matrix.agda }}
          restore-keys: |
              ${{ runner.os }}-stack-binaries
        
      - name: ⏬ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: 🛠️ Add Stack install directory to PATH
        run: echo $STACK_LOCAL_BIN >> $GITHUB_PATH
      
      - name: 🔍 Check if Agda has been installed
        id: check-agda
        continue-on-error: true
        run: which agda

      # - name: ✅ Verify Agda is ready
      #   if: ${{ steps.check-agda.outcome == 'success'}}
      #   run: echo "Agda already installed, skipping installation"
  
      - name: ⏬ Install Agda because it has not been installed
        if: ${{ steps.check-agda.outcome == 'failure'}}
        run: |
          stack install --resolver=lts-20.26 ${{ matrix.agda }}
          which agda
          agda --version

      # # things to be cached

      # - name: 💾 Cache stack global package db
      #   if:   always() && env.AGDA_INSTALLED != '0' && steps.stack-global.outputs.cache-hit != 'true'
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ${{ steps.haskell-setup.outputs.stack-root }}
      #     key: ${{ steps.stack-global.outputs.cache-primary-key }}

      - name: 💾 Cache stack-installed binaries
        if:   always() && env.AGDA_INSTALLED != '0' && steps.stack-binaries.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.STACK_LOCAL_BIN }}
          key: ${{ steps.stack-binaries.outputs.cache-primary-key }}
    
      - name: ⏬ Install NPM Dependencies
        run: npm install
        
      - name: 🔨 Build stuff 
        run: npm run build

      - name: 🚗 Run tests (Linux)
        if: runner.os == 'Linux'
        run: xvfb-run -a npm test

      - name: 🚗 Run tests (Windows, MacOS)
        if: runner.os != 'Linux'
        run: npm test 
